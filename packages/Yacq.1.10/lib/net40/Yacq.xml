<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yacq</name>
    </assembly>
    <members>
        <member name="T:XSpect.Yacq.Linq.YacqQueryable`1">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable`1"/> which is enabled querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of element in the source sequence.</typeparam>
        </member>
        <member name="T:XSpect.Yacq.Linq.YacqQueryable">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable"/> which is enabled querying with YACQ code strings.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Aggregate(System.Object,System.String,System.String)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <param name="seed">The initial accumulator value.</param>
            <param name="func"><c>(a, it) =></c> An accumulator function to invoke on each element.</param>
            <param name="selector"><c>(it) =></c> A function to transform the final accumulator value into the result value.</param>
            <returns>The transformed final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Aggregate(System.Object,System.String)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="seed">The initial accumulator value.</param>
            <param name="func"><c>(a, it) =></c> An accumulator function to invoke on each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Aggregate(System.String)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="func"><c>(a, it) =></c> An accumulator function to apply to each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.All(System.String)">
            <summary>
            Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns><c>true</c> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Any(System.String)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns><c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Any">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <returns><c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.AsQueryable">
            <summary>
            Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a generic <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that represents the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Buffer(System.Int32)">
            <summary>
            Generates a sequence of non-overlapping adjacent buffers over the source sequence.
            </summary>
            <param name="count">Number of elements for allocated buffers.</param>
            <returns>Sequence of buffers containing source sequence elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Buffer(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of buffers over the source sequence, with specified length and possible overlap.
            </summary>
            <param name="count">Number of elements for allocated buffers.</param>
            <param name="skip">Number of elements to skip between the start of consecutive buffers.</param>
            <returns>Sequence of buffers containing source sequence elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Cast``1">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to convert the elements of the source to.</typeparam>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Catch``1(System.String)">
            <summary>
            Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from calling an exception handler function in case of an error.
            </summary>
            <typeparam name="TException">Exception type to catch.</typeparam>
            <param name="handler"><c>(ex) =></c> Handler to invoke when an exception of the specified type occurs.</param>
            <returns>Source sequence, concatenated with an exception handler result sequence in case of an error.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Catch(System.String)">
            <summary>
            Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from calling an exception handler function in case of an error.
            </summary>
            <param name="handler"><c>(ex) =></c> Handler to invoke when an exception of the specified type occurs.</param>
            <returns>Source sequence, concatenated with an exception handler result sequence in case of an error.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Catch(System.Collections.IEnumerable)">
            <summary>
            Creates a sequence that returns the elements of the first sequence, switching to the second in case of an error.
            </summary>
            <param name="second">Second sequence, concatenated to the result in case the first sequence completes exceptionally.</param>
            <returns>The first sequence, followed by the second sequence in case an error is produced.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Concat(System.Collections.IEnumerable)">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="source2">The sequence to concatenate to the first sequence.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Contains(System.Object)">
            <summary>
            Determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <param name="item">The object to locate in the sequence.</param>
            <returns><c>true</c> if the input sequence contains an element that has the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Count">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Count(System.String)">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.DefaultIfEmpty">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains default value if the source is empty; otherwise, the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.DefaultIfEmpty(System.Object)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains <paramref name="defaultValue"/> if the source is empty; otherwise, the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Distinct(System.String)">
            <summary>
            Returns elements with a distinct key value by using the default equality comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence that contains the elements from the source sequence with distinct key values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Distinct">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains distinct elements from the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.DistinctUntilChanged(System.String)">
            <summary>
            Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.DistinctUntilChanged">
            <summary>
            Returns consecutive distinct elements by using the default equality comparer to compare values.
            </summary>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Do(System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Do(System.String,System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence, and executes an action upon exceptional termination.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke on exceptional termination of the sequence.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Do(System.String,System.String,System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence, and executes an action upon successful or exceptional termination.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke on exceptional termination of the sequence.</param>
            <param name="onCompleted"><c>() =></c> Action to invoke on successful termination of the sequence.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.DoWhile(System.String)">
            <summary>
            Generates an enumerable sequence by repeating a source sequence as long as the given loop postcondition holds.
            </summary>
            <param name="condition"><c>(it) =></c> Loop condition.</param>
            <returns>Sequence generated by repeating the given sequence until the condition evaluates to <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.ElementAt(System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>The element at the specified position in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.ElementAtOrDefault(System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>Default value if <paramref name="index" /> is outside the bounds of the source; otherwise, the element at the specified position in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Except(System.Collections.IEnumerable)">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the set difference of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Expand(System.String)">
            <summary>
            Expands the sequence by recursively applying a selector function.
            </summary>
            <param name="selector"><c>(it) =></c> Selector function to retrieve the next sequence to expand.</param>
            <returns>Sequence with results from the recursive expansion of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Finally(System.String)">
            <summary>
            Creates a sequence whose termination or disposal of an enumerator causes a finally action to be executed.
            </summary>
            <param name="finallyAction"><c>() =></c> Action to run upon termination of the sequence, or when an enumerator is disposed.</param>
            <returns>Source sequence with guarantees on the invocation of the finally action.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.First">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <returns>The first element in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.First(System.String)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The first element in source that passes the test in <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.FirstOrDefault">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <returns>Default value if the source is empty; otherwise, the first element in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.FirstOrDefault(System.String)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>Default value if source is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in source that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.GroupBy(System.String,System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector"><c>(it, e) =&gt;</c> A function to create a result value from each group.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has the result type and where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.GroupBy(System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <returns>An YacqQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> contains a sequence of objects of the element type and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.GroupBy(System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <returns>An YacqQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> object contains a sequence of objects and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.GroupJoin(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements of the result type obtained by performing a grouped join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Hide">
            <summary>
            Hides the enumerable sequence object identity.
            </summary>
            <returns>Enumerable sequence with the same behavior as the original, but hiding the source object identity.</returns>
            <remarks>AsQueryable doesn't hide the object identity, and simply acts as a cast to the IQueryable&lt;TSource&gt; interface.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.IgnoreElements">
            <summary>
            Ignores all elements in the source sequence.
            </summary>
            <returns>Source sequence without its elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Intersect(System.Collections.IEnumerable)">
            <summary>
            Produces the set intersection of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
            <returns>A sequence that contains the set intersection of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Join(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c> A function to create a result element from two matching elements.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has elements of the result type obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Last">
            <summary>
            Returns the last element in a sequence.
            </summary>
            <returns>The value at the last position in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Last(System.String)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The last element in source that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.LastOrDefault">
            <summary>
            Returns the last element in a sequence, or a default value if the sequence contains no elements.
            </summary>
            <returns>Default value if the source is empty; otherwise, the last element in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.LastOrDefault(System.String)">
            <summary>
            Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>Default value if source is empty or if no elements pass the test in the predicate function; otherwise, the last element of source that passes the test in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.LongCount">
            <summary>
            Returns an <see cref="T:System.Int64"/> that represents the total number of elements in a sequence.
            </summary>
            <returns>The number of elements in the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.LongCount(System.String)">
            <summary>
            Returns an <see cref="T:System.Int64"/> that represents the number of elements in a sequence that satisfy a condition.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>The number of elements in source that satisfy the condition in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.MaxBy(System.String)">
            <summary>
            Returns the elements with the maximum key value by using the default comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same maximum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Memoize(System.Int32,System.String)">
            <summary>
            Memoizes the source sequence within a selector function where a specified number of enumerators can get access to all of the sequence's elements without causing multiple enumerations over the source.
            </summary>
            <param name="readerCount">Number of enumerators that can access the underlying buffer. Once every enumerator has obtained an element from the buffer, the element is removed from the buffer.</param>
            <param name="selector"><c>(it) =></c> Selector function with memoized access to the source sequence for a specified number of enumerators.</param>
            <returns>Sequence resulting from applying the selector function to the memoized view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Memoize(System.String)">
            <summary>
            Memoizes the source sequence within a selector function where each enumerator can get access to all of the sequence's elements without causing multiple enumerations over the source.
            </summary>
            <param name="selector"><c>(it) =></c> Selector function with memoized access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the memoized view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.MinBy(System.String)">
            <summary>
            Returns the elements with the minimum key value by using the default comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same minimum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.OfType``1">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
            <returns>A collection that contains the elements from the source that have type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.OnErrorResumeNext(System.Collections.IEnumerable)">
            <summary>
            Creates a sequence that concatenates both given sequences, regardless of whether an error occurs.
            </summary>
            <param name="second">Second sequence.</param>
            <returns>Sequence concatenating the elements of both sequences, ignoring errors.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.OrderBy(System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.OrderByDescending(System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Publish(System.String)">
            <summary>
            Publishes the source sequence within a selector function where each enumerator can obtain a view over a tail of the source sequence.
            </summary>
            <param name="selector"><c>(it) =></c> Selector function with published access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the published view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Repeat">
            <summary>
            Repeats and concatenates the source sequence infinitely.
            </summary>
            <returns>Sequence obtained by concatenating the source sequence to itself infinitely.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Repeat(System.Int32)">
            <summary>
            Repeats and concatenates the source sequence the given number of times.
            </summary>
            <param name="count">Number of times to repeat the source sequence.</param>
            <returns>Sequence obtained by concatenating the source sequence to itself the specified number of times.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Retry">
            <summary>
            Creates a sequence that retries enumerating the source sequence as long as an error occurs.
            </summary>
            <returns>Sequence concatenating the results of the source sequence as long as an error occurs.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Retry(System.Int32)">
            <summary>
            Creates a sequence that retries enumerating the source sequence as long as an error occurs, with the specified maximum number of retries.
            </summary>
            <param name="retryCount">Maximum number of retries.</param>
            <returns>Sequence concatenating the results of the source sequence as long as an error occurs.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Reverse">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements correspond to those of the input sequence in reverse order.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Scan(System.Object,System.String)">
            <summary>
            Generates a sequence of accumulated values by scanning the source sequence and applying an accumulator function.
            </summary>
            <param name="seed">Accumulator seed value.</param>
            <param name="accumulator"><c>(a, it) =></c> Accumulation function to apply to the current accumulation value and each element of the sequence.</param>
            <returns>Sequence with all intermediate accumulation values resulting from scanning the sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Scan(System.String)">
            <summary>
            Generates a sequence of accumulated values by scanning the source sequence and applying an accumulator function.
            </summary>
            <param name="accumulator"><c>(a, it) =></c> Accumulation function to apply to the current accumulation value and each element of the sequence.</param>
            <returns>Sequence with all intermediate accumulation values resulting from scanning the sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Select(System.String)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> A projection function to apply to each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking a projection function on each element of source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SelectMany(System.String,System.String)">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
            </summary>
            <param name="collectionSelector"><c>(it) =&gt;</c> A projection function to apply to each element of the input sequence.</param>
            <param name="resultSelector"><c>(it, c) =&gt;</c> A projection function to apply to each element of each intermediate sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector"/> on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SelectMany(System.Collections.IEnumerable)">
            <summary>
            Projects each element of a sequence to an given sequence and flattens the resulting sequences into one sequence.
            </summary>
            <param name="other">Inner sequence each source sequenec element is projected onto.</param>
            <returns>Sequence flattening the sequences that result from projecting elements in the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SelectMany(System.String)">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and combines the resulting sequences into one sequence.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> A projection function to apply to each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SequenceEqual(System.Collections.IEnumerable)">
            <summary>
            Determines whether two sequences are equal by using the default equality comparer to compare elements.
            </summary>
            <param name="source2">An <see cref="T:System.Collections.IEnumerable"/> whose elements to compare to those of the first sequence.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <c>&gt;false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Share(System.String)">
            <summary>
            Shares the source sequence within a selector function where each enumerator can fetch the next element from the source sequence.
            </summary>
            <param name="selector"><c>(it) =></c> Selector function with shared access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the shared view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Single">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <returns>The single element of the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Single(System.String)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test an element for a condition.</param>
            <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SingleOrDefault">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <returns>The single element of the input sequence, or default value if the sequence contains no elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SingleOrDefault(System.String)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test an element for a condition.</param>
            <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate"/>, or default value if no such element is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SkipLast(System.Int32)">
            <summary>
            Bypasses a specified number of contiguous elements from the end of the sequence and returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip from the end of the sequence before returning the remaining elements.</param>
            <returns>Sequence bypassing the specified number of elements counting from the end of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.SkipWhile(System.String)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is <c>true</c> and then returns the remaining elements.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from source starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.StartWith(System.Object[])">
            <summary>
            Returns the source sequence prefixed with the specified value.
            </summary>
            <param name="values">Values to prefix the sequence with.</param>
            <returns>Sequence starting with the specified prefix value, followed by the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the specified number of elements from the start of the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.TakeLast(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of the sequence.
            </summary>
            <param name="count">The number of elements to take from the end of the sequence.</param>
            <returns>Sequence with the specified number of elements counting from the end of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.TakeWhile(System.String)">
            <summary>
            Returns elements from a sequence as long as a specified condition is <c>true</c>.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate"/> no longer passes.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Union(System.Collections.IEnumerable)">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the elements from both input sequences, excluding duplicates.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Where(System.String)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.Zip(System.Collections.IEnumerable,System.String)">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <param name="source2">The second sequence to merge.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> A function that specifies how to merge the elements from the two sequences.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains merged elements of two input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.ForEach(System.String)">
            <summary>
            Enumerates the sequence and invokes the given action for each value in the sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQueryable.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value>The <see cref="P:XSpect.Yacq.Linq.YacqQueryable.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQueryable.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value>A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQueryable.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQueryable.Symbols">
            <summary>
            Gets the additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.
            </summary>
            <value>The additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</value>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Aggregate``2(``0,System.String,System.String)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="seed">The initial accumulator value.</param>
            <param name="func"><c>(a, it) =></c> An accumulator function to invoke on each element.</param>
            <param name="selector"><c>(it) =></c> A function to transform the final accumulator value into the result value.</param>
            <returns>The transformed final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Aggregate``1(``0,System.String)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="seed">The initial accumulator value.</param>
            <param name="func"><c>(a, it) =></c> An accumulator function to invoke on each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Aggregate(System.String)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="func"><c>(a, it) =></c> An accumulator function to apply to each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.All(System.String)">
            <summary>
            Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns><c>true</c> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Any(System.String)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns><c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.AsQueryable">
            <summary>
            Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a generic <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that represents the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Buffer(System.Int32)">
            <summary>
            Generates a sequence of non-overlapping adjacent buffers over the source sequence.
            </summary>
            <param name="count">Number of elements for allocated buffers.</param>
            <returns>Sequence of buffers containing source sequence elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Buffer(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of buffers over the source sequence, with specified length and possible overlap.
            </summary>
            <param name="count">Number of elements for allocated buffers.</param>
            <param name="skip">Number of elements to skip between the start of consecutive buffers.</param>
            <returns>Sequence of buffers containing source sequence elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Cast``1">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to convert the elements of the source to.</typeparam>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Catch``1(System.String)">
            <summary>
            Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from calling an exception handler function in case of an error.
            </summary>
            <typeparam name="TException">Exception type to catch.</typeparam>
            <param name="handler"><c>(ex) =></c> Handler to invoke when an exception of the specified type occurs.</param>
            <returns>Source sequence, concatenated with an exception handler result sequence in case of an error.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Catch(System.String)">
            <summary>
            Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from calling an exception handler function in case of an error.
            </summary>
            <param name="handler"><c>(ex) =&gt;</c> Handler to invoke when an exception of the <see cref="T:System.Exception"/> occurs.</param>
            <returns>Source sequence, concatenated with an exception handler result sequence in case of an error.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Catch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a sequence that returns the elements of the first sequence, switching to the second in case of an error.
            </summary>
            <param name="second">Second sequence, concatenated to the result in case the first sequence completes exceptionally.</param>
            <returns>The first sequence, followed by the second sequence in case an error is produced.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Concat(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="source2">The sequence to concatenate to the first sequence.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Count(System.String)">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DefaultIfEmpty">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains default value if the source is empty; otherwise, the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DefaultIfEmpty(`0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains <paramref name="defaultValue"/> if the source is empty; otherwise, the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Distinct``1(System.String)">
            <summary>
            Returns elements with a distinct key value by using the default equality comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence that contains the elements from the source sequence with distinct key values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Distinct``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns elements with a distinct key value by using the specified equality comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>Sequence that contains the elements from the source sequence with distinct key values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Distinct">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains distinct elements from the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains distinct elements from the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Distinct(System.String)">
            <summary>
            Returns elements with a distinct key value by using the default equality comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence that contains the elements from the source sequence with distinct key values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DistinctUntilChanged``1(System.String)">
            <summary>
            Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DistinctUntilChanged``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DistinctUntilChanged">
            <summary>
            Returns consecutive distinct elements by using the default equality comparer to compare values.
            </summary>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DistinctUntilChanged(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns consecutive distinct elements by using the specified equality comparer to compare values.
            </summary>
            <param name="comparer">Comparer used to compare values.</param>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DistinctUntilChanged(System.String)">
            <summary>
            Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector.</param>
            <returns>Sequence without adjacent non-distinct elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Do(System.IObserver{`0})">
            <summary>
            Lazily invokes observer methods for each value in the sequence, and upon successful or exceptional termination.
            </summary>
            <param name="observer">Observer to invoke notification calls on.</param>
            <returns>Sequence exhibiting the side-effects of observer method invocation upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Do(System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Do(System.String,System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence, and executes an action upon exceptional termination.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke on exceptional termination of the sequence.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Do(System.String,System.String,System.String)">
            <summary>
            Lazily invokes an action for each value in the sequence, and executes an action upon successful or exceptional termination.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke on exceptional termination of the sequence.</param>
            <param name="onCompleted"><c>() =></c> Action to invoke on successful termination of the sequence.</param>
            <returns>Sequence exhibiting the specified side-effects upon enumeration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.DoWhile(System.String)">
            <summary>
            Generates an enumerable sequence by repeating a source sequence as long as the given loop postcondition holds.
            </summary>
            <param name="condition"><c>(it) =></c> Loop condition.</param>
            <returns>Sequence generated by repeating the given sequence until the condition evaluates to <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Except(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the set difference of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Except(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the set difference of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Expand(System.String)">
            <summary>
            Expands the sequence by recursively applying a selector function.
            </summary>
            <param name="selector"><c>(it) =></c> Selector function to retrieve the next sequence to expand.</param>
            <returns>Sequence with results from the recursive expansion of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Finally(System.String)">
            <summary>
            Creates a sequence whose termination or disposal of an enumerator causes a finally action to be executed.
            </summary>
            <param name="finallyAction"><c>() =></c> Action to run upon termination of the sequence, or when an enumerator is disposed.</param>
            <returns>Source sequence with guarantees on the invocation of the finally action.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.First(System.String)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The first element in source that passes the test in <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.FirstOrDefault(System.String)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>default(<typeparamref name="TSource"/>) if source is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in source that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``3(System.String,System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector"><c>(it, e) =&gt;</c> A function to create a result value from each group.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has a type argument of <typeparamref name="TResult"/> and where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``3(System.String,System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector"><c>(it, e) =&gt;</c> A function to create a result value from each group.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has a type argument of <typeparamref name="TResult"/> and where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``2(System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <returns>An YacqQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> contains a sequence of objects of type <typeparamref name="TElement"/> and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``2(System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <returns>An YacqQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> contains a sequence of objects of type <typeparamref name="TElement"/> and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``1(System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <returns>An YacqQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> object contains a sequence of objects and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; where each <see cref="T:System.Linq.IGrouping`2"/> contains a sequence of objects and a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupBy``1(System.String,System.String,System.String)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector"><c>(it, e) =&gt;</c> A function to create a result value from each group.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has a type argument of <typeparamref name="TResult"/> and where each element represents a projection over a group and its key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements of type <typeparamref name="TResult"/> obtained by performing a grouped join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c> A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <param name="comparer">A comparer to hash and compare keys.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that contains elements of type <typeparamref name="TResult"/> obtained by performing a grouped join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Hide">
            <summary>
            Hides the enumerable sequence object identity.
            </summary>
            <returns>Enumerable sequence with the same behavior as the original, but hiding the source object identity.</returns>
            <remarks>AsQueryable doesn't hide the object identity, and simply acts as a cast to the IQueryable&lt;TSource&gt; interface.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.IgnoreElements">
            <summary>
            Ignores all elements in the source sequence.
            </summary>
            <returns>Source sequence without its elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
            <returns>A sequence that contains the set intersection of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Intersect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence are returned.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the set intersection of the two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Join``3(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c> A function to create a result element from two matching elements.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has elements of type <typeparamref name="TResult"/> obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Join``3(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector"><c>(it) =&gt;</c> A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector"><c>(o, i) =&gt;</c> A function to create a result element from two matching elements.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to hash and compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that has elements of type <typeparamref name="TResult"/> obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Last(System.String)">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>The last element in source that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.LastOrDefault(System.String)">
            <summary>
            Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test each element for a condition.</param>
            <returns>default(<typeparamref name="TSource"/>) if source is empty or if no elements pass the test in the predicate function; otherwise, the last element of source that passes the test in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.LongCount(System.String)">
            <summary>
            Returns an <see cref="T:System.Int64"/> that represents the number of elements in a sequence that satisfy a condition.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>The number of elements in source that satisfy the condition in the predicate function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MaxBy``1(System.String)">
            <summary>
            Returns the elements with the maximum key value by using the default comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same maximum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MaxBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the elements with the minimum key value by using the specified comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <param name="comparer">Comparer used to determine the maximum key value.</param>
            <returns>List with the elements that share the same maximum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MaxBy(System.String)">
            <summary>
            Returns the elements with the maximum key value by using the default comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same maximum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Memoize``1(System.Int32,System.String)">
            <summary>
            Memoizes the source sequence within a selector function where a specified number of enumerators can get access to all of the sequence's elements without causing multiple enumerations over the source.
            </summary>
            <typeparam name="TResult">Result sequence element type.</typeparam>
            <param name="readerCount">Number of enumerators that can access the underlying buffer. Once every enumerator has obtained an element from the buffer, the element is removed from the buffer.</param>
            <param name="selector"><c>(it) =></c> Selector function with memoized access to the source sequence for a specified number of enumerators.</param>
            <returns>Sequence resulting from applying the selector function to the memoized view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Memoize``1(System.String)">
            <summary>
            Memoizes the source sequence within a selector function where each enumerator can get access to all of the sequence's elements without causing multiple enumerations over the source.
            </summary>
            <typeparam name="TResult">Result sequence element type.</typeparam>
            <param name="selector"><c>(it) =></c> Selector function with memoized access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the memoized view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MinBy``1(System.String)">
            <summary>
            Returns the elements with the minimum key value by using the default comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same minimum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MinBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the elements with the minimum key value by using the specified comparer to compare key values.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <param name="comparer">Comparer used to determine the minimum key value.</param>
            <returns>List with the elements that share the same minimum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.MinBy(System.String)">
            <summary>
            Returns the elements with the minimum key value by using the default comparer to compare key values.
            </summary>
            <param name="keySelector"><c>(it) =></c> Key selector used to extract the key for each element in the sequence.</param>
            <returns>List with the elements that share the same minimum key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OfType``1">
            <summary>
            Filters the elements of an <see cref="T:System.Linq.IQueryable"/> based on a specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
            <returns>A collection that contains the elements from the source that have type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OnErrorResumeNext(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a sequence that concatenates both given sequences, regardless of whether an error occurs.
            </summary>
            <param name="second">Second sequence.</param>
            <returns>Sequence concatenating the elements of both sequences, ignoring errors.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderBy``1(System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderBy(System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderByDescending``1(System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderByDescending``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.OrderByDescending(System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from an element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Publish``1(System.String)">
            <summary>
            Publishes the source sequence within a selector function where each enumerator can obtain a view over a tail of the source sequence.
            </summary>
            <typeparam name="TResult">Result sequence element type.</typeparam>
            <param name="selector"><c>(it) =></c> Selector function with published access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the published view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Repeat">
            <summary>
            Repeats and concatenates the source sequence infinitely.
            </summary>
            <returns>Sequence obtained by concatenating the source sequence to itself infinitely.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Repeat(System.Int32)">
            <summary>
            Repeats and concatenates the source sequence the given number of times.
            </summary>
            <param name="count">Number of times to repeat the source sequence.</param>
            <returns>Sequence obtained by concatenating the source sequence to itself the specified number of times.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Retry">
            <summary>
            Creates a sequence that retries enumerating the source sequence as long as an error occurs.
            </summary>
            <returns>Sequence concatenating the results of the source sequence as long as an error occurs.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Retry(System.Int32)">
            <summary>
            Creates a sequence that retries enumerating the source sequence as long as an error occurs, with the specified maximum number of retries.
            </summary>
            <param name="retryCount">Maximum number of retries.</param>
            <returns>Sequence concatenating the results of the source sequence as long as an error occurs.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Reverse">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements correspond to those of the input sequence in reverse order.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Scan``1(``0,System.String)">
            <summary>
            Generates a sequence of accumulated values by scanning the source sequence and applying an accumulator function.
            </summary>
            <typeparam name="TAccumulate">Accumulation type.</typeparam>
            <param name="seed">Accumulator seed value.</param>
            <param name="accumulator"><c>(a, it) =></c> Accumulation function to apply to the current accumulation value and each element of the sequence.</param>
            <returns>Sequence with all intermediate accumulation values resulting from scanning the sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Scan(System.String)">
            <summary>
            Generates a sequence of accumulated values by scanning the source sequence and applying an accumulator function.
            </summary>
            <param name="accumulator"><c>(a, it) =></c> Accumulation function to apply to the current accumulation value and each element of the sequence.</param>
            <returns>Sequence with all intermediate accumulation values resulting from scanning the sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Select``1(System.String)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector"/>.</typeparam>
            <param name="selector"><c>(it) =&gt;</c> A projection function to apply to each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking a projection function on each element of source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SelectMany``2(System.String,System.String)">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
            </summary>
            <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
            <param name="collectionSelector"><c>(it) =&gt;</c> A projection function to apply to each element of the input sequence.</param>
            <param name="resultSelector"><c>(it, c) =&gt;</c> A projection function to apply to each element of each intermediate sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector"/> on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SelectMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Projects each element of a sequence to an given sequence and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TOther">Second source sequence element type.</typeparam>
            <param name="other">Inner sequence each source sequenec element is projected onto.</param>
            <returns>Sequence flattening the sequences that result from projecting elements in the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SelectMany``1(System.String,System.String)">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
            </summary>
            <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
            <param name="collectionSelector"><c>(it) =&gt;</c> A projection function to apply to each element of the input sequence.</param>
            <param name="resultSelector"><c>(it, c) =&gt;</c> A projection function to apply to each element of each intermediate sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector"/> on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SelectMany``1(System.String)">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and combines the resulting sequences into one sequence.
            </summary>
            <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector"/>.</typeparam>
            <param name="selector"><c>(it) =&gt;</c> A projection function to apply to each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Share``1(System.String)">
            <summary>
            Shares the source sequence within a selector function where each enumerator can fetch the next element from the source sequence.
            </summary>
            <typeparam name="TResult">Result sequence element type.</typeparam>
            <param name="selector"><c>(it) =></c> Selector function with shared access to the source sequence for each enumerator.</param>
            <returns>Sequence resulting from applying the selector function to the shared view over the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Single(System.String)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test an element for a condition.</param>
            <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SingleOrDefault(System.String)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="predicate"><c>(it) =></c> A function to test an element for a condition.</param>
            <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate"/>, or default(<typeparamref name="TSource"/>) if no such element is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SkipLast(System.Int32)">
            <summary>
            Bypasses a specified number of contiguous elements from the end of the sequence and returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip from the end of the sequence before returning the remaining elements.</param>
            <returns>Sequence bypassing the specified number of elements counting from the end of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.SkipWhile(System.String)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is <c>true</c> and then returns the remaining elements.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from source starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.StartWith(`0[])">
            <summary>
            Returns the source sequence prefixed with the specified value.
            </summary>
            <param name="values">Values to prefix the sequence with.</param>
            <returns>Sequence starting with the specified prefix value, followed by the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the specified number of elements from the start of the source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.TakeLast(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of the sequence.
            </summary>
            <param name="count">The number of elements to take from the end of the sequence.</param>
            <returns>Sequence with the specified number of elements counting from the end of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.TakeWhile(System.String)">
            <summary>
            Returns elements from a sequence as long as a specified condition is <c>true</c>.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate"/> no longer passes.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the elements from both input sequences, excluding duplicates.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Union(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains the elements from both input sequences, excluding duplicates.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Where(System.String)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Zip``1(System.Collections.IEnumerable,System.String)">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="source2">The second sequence to merge.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> A function that specifies how to merge the elements from the two sequences.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains merged elements of two input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="source2">The second sequence to merge.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> A function that specifies how to merge the elements from the two sequences.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> that contains merged elements of two input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.ForEach(System.String)">
            <summary>
            Enumerates the sequence and invokes the given action for each value in the sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQueryable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1">
            <summary>
            Represents an <see cref="T:System.Linq.IOrderedQueryable`1"/> which is enabled querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of element in the source sequence.</typeparam>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenBy``1(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenBy(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenByDescending``1(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenByDescending``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TKey">The type of the key that is returned by the <paramref name="keySelector"/> function.</typeparam>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable`1.ThenByDescending(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="T:XSpect.Yacq.Linq.YacqOrderedQueryable">
            <summary>
            Represents an <see cref="T:System.Linq.IOrderedQueryable"/> which is enabled querying with YACQ code strings.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable.ThenBy(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqOrderedQueryable.ThenByDescending(System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>An <see cref="T:XSpect.Yacq.Linq.YacqOrderedQueryable`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="T:XSpect.Yacq.Linq.YacqQbservable`1">
            <summary>
            Represents an <see cref="T:System.Reactive.Linq.IQbservable`1"/> which is enabled querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of element in the source sequence.</typeparam>
        </member>
        <member name="T:XSpect.Yacq.Linq.YacqQbservable">
            <summary>
            Represents an <see cref="T:System.Reactive.Linq.IQbservable"/> which is enabled querying with YACQ code strings.
            </summary>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQbservable.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Reactive.Linq.IQbservable"/>.
            </summary>
            <value>The expression tree that is associated with the instance of <see cref="T:System.Reactive.Linq.IQbservable"/>.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQbservable.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Reactive.Linq.IQbservable"/> is executed.
            </summary>
            <value>The type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Reactive.Linq.IQbservable"/> is executed.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQbservable.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value>The query provider that is associated with this data source.</value>
        </member>
        <member name="P:XSpect.Yacq.Linq.YacqQbservable.Symbols">
            <summary>
            Gets the additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.
            </summary>
            <value>The additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</value>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Aggregate``1(``0,System.String)">
            <summary>
            Applies an accumulator function over an observable sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator"><c>(a, it) =&gt;</c> An accumulator function to be invoked on each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with the final accumulator value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Aggregate(System.String)">
            <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
            <param name="accumulator"><c>(a, it) =&gt;</c> An accumulator function to be invoked on each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with the final accumulator value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.All(System.String)">
            <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Amb(System.IObservable{`0})">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <param name="second">Second observable sequence.</param>
            <returns>An observable sequence that surfaces either of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Any">
            <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
            <returns>An observable sequence containing a single element determining whether the source sequence contains any elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Any(System.String)">
            <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer``1(System.String)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
            <param name="bufferClosingSelector"><c>(it) =&gt;</c> A function invoked to define the boundaries of the produced buffers. A new buffer is started when the previous one is closed.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer``2(System.IObservable{``0},System.String)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
            <param name="bufferOpenings">Observable sequence whose elements denote the creation of new buffers.</param>
            <param name="bufferClosingSelector"><c>(it) =&gt;</c> A function invoked to define the closing of each produced buffer.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on element count information.
            </summary>
            <param name="count">Length of each buffer.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
            </summary>
            <param name="count">Length of each buffer.</param>
            <param name="skip">Number of elements to skip between creation of consecutive buffers.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each buffer.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan,System.Int32)">
            <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="timeSpan">Maximum time length of a buffer.</param>
            <param name="count">Maximum element count of a buffer.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan,System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="timeShift">Interval between creation of consecutive buffers.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Buffer(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="timeShift">Interval between creation of consecutive buffers.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Cast``1">
            <summary>
            Converts the elements of an observable sequence to the specified type.
            </summary>
            <returns>An observable sequence that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Catch``1(System.String)">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence produced by the handler.
            </summary>
            <param name="handler"><c>(ex) =&gt;</c> Exception handler function, producing another observable sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the source sequence's elements, followed by the elements produced by the handler's resulting observable sequence in case an exception occurred.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Catch(System.IObservable{`0})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <param name="second">Second observable sequence used to produce results when an error occurred in the first sequence.</param>
            <returns>An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Chunkify">
            <summary>
            Produces an enumerable sequence of consecutive (possibly empty) chunks of the source sequence.
            </summary>
            <returns>The enumerable sequence that returns consecutive (possibly empty) chunks upon each iteration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Collect``1(System.String,System.String,System.String)">
            <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
            <param name="getInitialCollector"><c>() =></c> Factory to create the initial collector object.</param>
            <param name="merge"><c>(it, s) =></c> Merges a sequence element with the current collector.</param>
            <param name="getNewCollector"><c>(it) =></c> Factory to replace the current collector by a new collector.</param>
            <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Collect``1(System.String,System.String)">
            <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
            <param name="newCollector"><c>() =></c> Factory to create a new collector object.</param>
            <param name="merge"><c>(it, s) =></c> Merges a sequence element with the current collector.</param>
            <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``2(System.IObservable{``0},System.String)">
            <summary>
            Merges two observable sequences into one observable sequence by using the selector function whenever one of the observable sequences produces an element.
            </summary>
            <param name="second">Second observable source.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> Function to invoke whenever either of the sources produces an element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of both sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="source15">Fifteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14, it15) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.CombineLatest``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="source15">Fifteenth observable source.</param>
            <param name="source16">Sixteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14, it15, it16) =&gt;</c> Function to invoke whenever any of the sources produces an element.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Concat(System.IObservable{`0})">
            <summary>
            Concatenates two observable sequences.
            </summary>
            <param name="second">Second observable sequence.</param>
            <returns>An observable sequence that contains the elements of the first sequence, followed by those of the second the sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Contains(`0)">
            <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
            <param name="value">The value to locate in the sequence.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Count">
            <summary>
            Returns a <see cref="T:System.Int32"/> that represents the total number of elements in an observable sequence.
            </summary>
            <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DefaultIfEmpty">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
            <returns>An observable sequence that contains the default value for the TSource type if the source is empty; otherwise, the elements of the source itself.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DefaultIfEmpty(`0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
            </summary>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <returns>An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.DateTimeOffset)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription.</param>
            <param name="scheduler">Scheduler to run the delay timers on.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.TimeSpan)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="dueTime">Relative time by which to shift the observable sequence.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="dueTime">Relative time by which to shift the observable sequence.</param>
            <param name="scheduler">Scheduler to run the delay timers on.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DelaySubscription(System.DateTimeOffset)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <param name="dueTime">Absolute time to perform the subscription at.</param>
            <returns>Time-shifted sequence.</returns>
            <remarks>This operator is more efficient than <see cref="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.DateTimeOffset)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DelaySubscription(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <param name="dueTime">Absolute time to perform the subscription at.</param>
            <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
            <returns>Time-shifted sequence.</returns>
            <remarks>This operator is more efficient than <see cref="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DelaySubscription(System.TimeSpan)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <param name="dueTime">Relative time shift of the subscription.</param>
            <returns>Time-shifted sequence.</returns>
            <remarks>This operator is more efficient than <see cref="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.TimeSpan)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DelaySubscription(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <param name="dueTime">Relative time shift of the subscription.</param>
            <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
            <returns>Time-shifted sequence.</returns>
            <remarks>This operator is more efficient than <see cref="M:XSpect.Yacq.Linq.YacqQbservable`1.Delay(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Distinct``1(System.String)">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to compute the comparison key for each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Distinct``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to compute the comparison key for each element.</param>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Distinct">
            <summary>
            Returns an observable sequence that contains only distinct elements.
            </summary>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the comparer.
            </summary>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DistinctUntilChanged``1(System.String)">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to compute the comparison key for each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DistinctUntilChanged``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to compute the comparison key for each element.</param>
            <param name="comparer">Equality comparer for computed key values.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DistinctUntilChanged">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
            <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DistinctUntilChanged(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the comparer.
            </summary>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Do(System.IObserver{`0})">
            <summary>
            Invokes the observer's methods for their side-effects.
            </summary>
            <param name="observer">Observer whose methods to invoke as part of the source sequence's observation.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Do(System.String)">
            <summary>
            Invokes an action for each element in the observable sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element in the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Do(System.String,System.String)">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon exceptional termination of the observable sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element in the observable sequence.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke upon exceptional termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Do(System.String,System.String,System.String)">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element in the observable sequence.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompleted"><c>() =></c> Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.DoWhile(System.String)">
            <summary>
            Repeats source as long as condition holds.
            </summary>
            <param name="condition"><c>(it) =></c> Action to determine the condition.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ElementAtOrDefault(System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Expand(System.String)">
            <summary>
            Expands an observable sequence by recursively invoking selector.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing all the elements produced by the recursive expansion.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Expand(System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Expands an observable sequence by recursively invoking selector.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <param name="scheduler">Scheduler on which to perform the expansion.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing all the elements produced by the recursive expansion.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Finally(System.String)">
            <summary>
            Invokes a specified action after source observable sequence terminates normally or by an exception.
            </summary>
            <param name="finallyAction"><c>() =></c> Action to invoke after the source observable sequence terminates.</param>
            <returns>Source sequence with the action-invoking termination behavior applied.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.FirstAsync">
            <summary>
            Returns the first element of an observable sequence.
            </summary>
            <returns>Sequence containing the first element in the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.FirstAsync(System.String)">
            <summary>
            Returns the first element of an observable sequence that matches the predicate.
            </summary>
            <param name="predicate"><c>(it) =></c> A predicate function to evaluate for elements in the sequence.</param>
            <returns>Sequence containing the first element in the observable sequence for which the predicate holds.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.FirstOrDefaultAsync">
            <summary>
            Returns the first element of an observable sequence, or a default value if no value is found.
            </summary>
            <returns>Sequence containing the first element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.FirstOrDefaultAsync(System.String)">
            <summary>
            Returns the first element of an observable sequence that matches the predicate, or a default value if no value is found.
            </summary>
            <param name="predicate"><c>(it) =></c> A predicate function to evaluate for elements in the sequence.</param>
            <returns>The first element in the observable sequence for which the predicate holds, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ForkJoin``2(System.IObservable{``0},System.String)">
            <summary>
            Runs two observable sequences in parallel and combines their last elemenets.
            </summary>
            <param name="second">Second observable sequence.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> Result selector function to invoke with the last elements of both sequences.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> with the result of calling the selector function with the last elements of both input sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupBy``2(System.String,System.String)">
            <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an observable group.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupBy``2(System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an observable group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupBy``1(System.String)">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupBy``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupByUntil``2(System.String,System.String)">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="durationSelector"><c>(it) =&gt;</c> A function to signal the expiration of a group.</param>
            <returns>
            A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupByUntil``2(System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="durationSelector"><c>(it) =&gt;</c> A function to signal the expiration of a group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>
            A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupByUntil``3(System.String,System.String,System.String)">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an observable group.</param>
            <param name="durationSelector"><c>(it) =&gt;</c> A function to signal the expiration of a group.</param>
            <returns>
            A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupByUntil``3(System.String,System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract the key for each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A function to map each source element to an element in an observable group.</param>
            <param name="durationSelector"><c>(it) =&gt;</c> A function to signal the expiration of a group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>
            A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.GroupJoin``4(System.IObservable{``0},System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector"><c>(it) =&gt;</c> A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector"><c>(it) =&gt;</c> A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector"><c>(l, r) =&gt;</c> A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.IgnoreElements">
            <summary>
            Ignores all values in an observable sequence leaving only the termination messages.
            </summary>
            <returns>An empty observable sequence that signals termination, successful or exceptional, of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.IsEmpty">
            <summary>
            Determines whether an observable sequence is empty.
            </summary>
            <returns>An observable sequence containing a single element determining whether the source sequence is empty.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Join``4(System.IObservable{``0},System.String,System.String,System.String)">
            <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector"><c>(it) =&gt;</c> A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector"><c>(it) =&gt;</c> A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector"><c>(l, r) =&gt;</c> A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.LastAsync">
            <summary>
            Returns the last element of an observable sequence.
            </summary>
            <returns>Sequence containing the last element in the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.LastAsync(System.String)">
            <summary>
            Returns the last element of an observable sequence that matches the predicate.
            </summary>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>Sequence containing the last element in the observable sequence for which the predicate holds.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.LastOrDefaultAsync">
            <summary>
            Returns the last element of an observable sequence, or a default value if no value is found.
            </summary>
            <returns>Sequence containing the last element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.LastOrDefaultAsync(System.String)">
            <summary>
            Returns the last element of an observable sequence that matches the predicate, or a default value if no value is found.
            </summary>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>Sequence containing the last element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Latest">
            <summary>
            Samples the most recent value in an observable sequence.
            </summary>
            <returns>The enumerable sequence that returns the last sampled element upon each iteration and subsequently blocks until the next element in the observable source sequence becomes available.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Let``1(System.String)">
            <summary>
            Bind the source to the parameter without sharing subscription side-effects.
            </summary>
            <param name="function"><c>(it) =></c> A function which specifies the side effects.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.LongCount">
            <summary>
            Returns a <see cref="T:System.Int64"/> that represents the total number of elements in an observable sequence.
            </summary>
            <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ManySelect``1(System.String)">
            <summary>
            Comonadic bind operator.
            </summary>
            <param name="selector"><c>(it) =></c> A selector function.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ManySelect``1(System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Comonadic bind operator.
            </summary>
            <param name="selector"><c>(it) =></c> A selector function.</param>
            <param name="scheduler">Scheduler on which to perform the expansion.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Materialize">
            <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
            <returns>An observable sequence containing the materialized notification values from the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.MaxBy``1(System.String)">
            <summary>
            Returns the elements in an observable sequence with the maximum key value.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> Key selector function.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a list of zero or more elements that have a maximum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.MaxBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the elements in an observable sequence with the maximum key value according to the specified comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> Key selector function.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a list of zero or more elements that have a maximum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Merge(System.IObservable{`0})">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
            <param name="second">Second observable sequence.</param>
            <returns>The observable sequence that merges the elements of the given sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Merge(System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
            <param name="second">Second observable sequence.</param>
            <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
            <returns>The observable sequence that merges the elements of the given sequences.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.MinBy``1(System.String)">
            <summary>
            Returns the elements in an observable sequence with the minimum key value.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> Key selector function.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a list of zero or more elements that have a minimum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.MinBy``1(System.String,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> Key selector function.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a list of zero or more elements that have a minimum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.MostRecent(`0)">
            <summary>
            Samples the most recent value in an observable sequence.
            </summary>
            <param name="initialValue">Initial value that will be yielded by the enumerable sequence if no element has been sampled yet.</param>
            <returns>The enumerable sequence that returns the last sampled element upon each iteration.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Multicast``2(System.String,System.String)">
            <summary>
            Returns an observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
            </summary>
            <param name="subjectSelector"><c>(it) =&gt;</c> Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.</param>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Next">
            <summary>
            Samples the next value (blocking without buffering) from in an observable sequence.
            </summary>
            <returns>The enumerable sequence that blocks upon each iteration until the next element in the observable source sequence becomes available.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ObserveOn(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Asynchronously notify observers on the specified scheduler.
            </summary>
            <param name="scheduler">Scheduler to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified scheduler.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ObserveOn(System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously notify observers on the specified synchronization context.
            </summary>
            <param name="context">Synchronization context to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.OfType``1">
            <summary>
            Filters the elements of an observable sequence based on the specified type.
            </summary>
            <returns>An observable sequence that contains elements from the input sequence of type TResult.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.OnErrorResumeNext(System.IObservable{`0})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <param name="second">Second observable sequence used to produce results after the first sequence terminates.</param>
            <returns>An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Publish``1(System.String)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Publish``1(System.String,`0)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</param>
            <param name="initialValue">Initial value received by observers upon subscription.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.Subject"/>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.PublishLast``1(System.String)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will only receive the last notification of the source.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Remotable">
            <summary>
            Makes an observable sequence remotable.
            </summary>
            <returns>The observable sequence that supports remote subscriptions.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Repeat">
            <summary>
            Repeats the observable sequence indefinitely.
            </summary>
            <returns>The observable sequence producing the elements of the given sequence repeatedly and sequentially.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Repeat(System.Int32)">
            <summary>
            Repeats the observable sequence a specified number of times.
            </summary>
            <param name="repeatCount">Number of times to repeat the sequence.</param>
            <returns>The observable sequence producing the elements of the given sequence repeatedly.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.Int32)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Replay``1(System.String,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Retry">
            <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
            <returns>Observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Retry(System.Int32)">
            <summary>
            Repeats the source observable sequence the specified number of times or until it successfully terminates.
            </summary>
            <param name="retryCount">Number of times to repeat the sequence.</param>
            <returns>Observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Sample``1(System.IObservable{``0})">
            <summary>
            Samples the observable sequence at sampling ticks.
            </summary>
            <param name="sampler">Sampling tick sequence.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Sample(System.TimeSpan)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <param name="interval">Interval at which to sample.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Sample(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <param name="interval">Interval at which to sample.</param>
            <param name="scheduler">Scheduler to run the sampling timer on.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Scan``1(``0,System.String)">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator"><c>(a, it) =&gt;</c> An accumulator function to be invoked on each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the accumulated values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Scan(System.String)">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            </summary>
            <param name="accumulator"><c>(a, it) =&gt;</c> An accumulator function to be invoked on each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the accumulated values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Select``1(System.String)">
            <summary>
            Projects each element of an observable sequence into a new form.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> A transform function to apply to each source element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SelectMany``2(System.String,System.String)">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="collectionSelector"><c>(it) =&gt;</c> A transform function to apply to each element.</param>
            <param name="resultSelector"><c>(it, c) =&gt;</c> A transform function to apply to each element of the intermediate sequence.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SelectMany``1(System.IObservable{``0})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="other">An observable sequence to project each element from the source sequence onto.</param>
            <returns>An observable sequence whose elements are the result of projecting each source element onto the other sequence and merging all the resulting sequences together.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SelectMany``1(System.String,System.String,System.String)">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="onNext"><c>(it) =&gt;</c> A transform function to apply to each element.</param>
            <param name="onError"><c>(ex) =&gt;</c> A transform function to apply when an error occurs in the source sequence.</param>
            <param name="onCompleted"><c>() =&gt;</c> A transform function to apply when the end of the source sequence is reached.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SelectMany``1(System.String)">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="selector"><c>(it) =&gt;</c> A transform function to apply to each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SequenceEqual(System.IObservable{`0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
            <param name="second">Second observable sequence to compare.</param>
            <returns>An observable sequence that contains a single element which indicates whether both sequences are equal.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SequenceEqual(System.IObservable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
            <param name="second">Second observable sequence to compare.</param>
            <param name="comparer">Comparer used to compare elements of both sequences.</param>
            <returns>An observable sequence that contains a single element which indicates whether both sequences are equal.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SingleAsync">
            <summary>
            Returns the only element of an observable sequence and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
            <returns>Sequence containing the single element in the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SingleAsync(System.String)">
            <summary>
            Returns the only element of an observable sequence that matches the predicate and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
            <param name="predicate"><c>(it) =></c> A predicate function to evaluate for elements in the sequence.</param>
            <returns>Sequence containing the single element in the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SingleOrDefaultAsync">
            <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
            <returns>Sequence containing the single element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SingleOrDefaultAsync(System.String)">
            <summary>
            Returns the only element of an observable sequence that matches the predicate, or a default value if no value is found; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
            <param name="predicate"><c>(it) =></c> A predicate function to evaluate for elements in the sequence.</param>
            <returns>Sequence containing the single element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of values in an observable sequence and then returns the remaining values.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An observable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SkipLast(System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of an observable sequence.
            </summary>
            <param name="count">Number of elements to bypass at the end of the source sequence.</param>
            <returns>An observable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SkipUntil``1(System.IObservable{``0})">
            <summary>
            Returns the values from the source observable sequence only after the other observable sequence produces a value.
            </summary>
            <param name="other">Observable sequence that triggers propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SkipWhile(System.String)">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is <c>true</c> and then returns the remaining values.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.StartWith(System.Reactive.Concurrency.IScheduler,`0[])">
            <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
            <param name="scheduler">Scheduler to emit the prepended values on.</param>
            <param name="values">Values to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.StartWith(`0[])">
            <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
            <param name="values">Values to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SubscribeOn(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified scheduler.
            </summary>
            <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.SubscribeOn(System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified synchronization context.
            </summary>
            <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Synchronize">
            <summary>
            Synchronizes the observable sequence.
            </summary>
            <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Synchronize(System.Object)">
            <summary>
            Synchronizes the observable sequence.
            </summary>
            <param name="gate">Gate object to synchronize each observer call on.</param>
            <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.TakeLast(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
            <param name="count">Number of elements to take from the end of the source sequence.</param>
            <returns>An observable sequence containing the specified number of elements from the of the source sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.TakeUntil``1(System.IObservable{``0})">
            <summary>
            Returns the values from the source observable sequence until the other observable sequence produces a value.
            </summary>
            <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.TakeWhile(System.String)">
            <summary>
            Returns values from an observable sequence as long as a specified condition is <c>true</c>, and then skips the remaining values.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Then``1(System.String)">
            <summary>
            Matches when the observable sequence has an available value and projects the value.
            </summary>
            <param name="selector"><c>(it) =></c> A selector function.</param>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Throttle(System.TimeSpan)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
            <param name="dueTime">Duration of the throttle period for each value.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Throttle(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
            <param name="dueTime">Duration of the throttle period for each value.</param>
            <param name="scheduler">Scheduler to run the throttle timers on.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.TimeInterval">
            <summary>
            Records the time interval between consecutive values in an observable sequence.
            </summary>
            <returns>An observable sequence with time interval information on values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.TimeInterval(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Records the time interval between consecutive values in an observable sequence.
            </summary>
            <param name="scheduler">Scheduler used to compute time intervals.</param>
            <returns>An observable sequence with time interval information on values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.DateTimeOffset)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="dueTime">Time when a timeout occurs.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.DateTimeOffset,System.IObservable{`0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.DateTimeOffset,System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.TimeSpan)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.TimeSpan,System.IObservable{`0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.TimeSpan,System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timeout(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timestamp">
            <summary>
            Records the timestamp for each value in an observable sequence.
            </summary>
            <returns>An observable sequence with timestamp information on values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Timestamp(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Records the timestamp for each value in an observable sequence.
            </summary>
            <param name="scheduler">Scheduler used to compute timestamps.</param>
            <returns>An observable sequence with timestamp information on values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToArray">
            <summary>
            Creates an array from an observable sequence.
            </summary>
            <returns>An observable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToDictionary``2(System.String,System.String)">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A transform function to produce a result element value from each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToDictionary``2(System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> &gt;A function to extract a key from each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToDictionary``1(System.String)">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToDictionary``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToList">
            <summary>
            Creates a list from an observable sequence.
            </summary>
            <returns>An observable sequence containing a single element with a list containing all the elements of the source sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToLookup``2(System.String,System.String)">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A transform function to produce a result element value from each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToLookup``2(System.String,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="elementSelector"><c>(it) =&gt;</c> A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToLookup``1(System.String)">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToLookup``1(System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
            <param name="keySelector"><c>(it) =&gt;</c> A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on <see cref="T:System.Collections.Generic.IEnumerable`1"/> in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.ToQueryable">
            <summary>
            Converts an <see cref="T:System.Reactive.Linq.IQbservable`1"/> sequence to an <see cref="T:System.Linq.IQueryable`1"/> sequence.
            </summary>
            <returns>The <see cref="T:System.Linq.IQueryable`1"/> sequence containing the elements in the <see cref="T:System.Reactive.Linq.IQbservable`1"/> sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Where(System.String)">
            <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
            <param name="predicate"><c>(it) =&gt;</c> A function to test each source element for a condition.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window``1(System.String)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
            <param name="windowClosingSelector"><c>(it) =&gt;</c> A function invoked to define the boundaries of the produced windows. A new window is started when the previous one is closed.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window``2(System.IObservable{``0},System.String)">
            <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
            <param name="windowOpenings">Observable sequence whose elements denote the creation of new windows.</param>
            <param name="windowClosingSelector"><c>(it) =&gt;</c> A function invoked to define the closing of each produced window.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on element count information.
            </summary>
            <param name="count">Length of each window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
            </summary>
            <param name="count">Length of each window.</param>
            <param name="skip">Number of elements to skip between creation of consecutive windows.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each window.</param>
            <returns>The sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan,System.Int32)">
            <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each window.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan,System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each window.</param>
            <param name="timeShift">Interval between creation of consecutive windows.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Window(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
            <param name="timeSpan">Length of each window.</param>
            <param name="timeShift">Interval between creation of consecutive windows.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
            <param name="second">Second enumerable source.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> Function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``2(System.IObservable{``0},System.String)">
            <summary>
            Merges two observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <param name="second">Second observable source.</param>
            <param name="resultSelector"><c>(it, it2) =&gt;</c> Function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>A <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``3(System.IObservable{``0},System.IObservable{``1},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="source15">Fifteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14, it15) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Zip``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.String)">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
            <param name="source2">Second observable source.</param>
            <param name="source3">Third observable source.</param>
            <param name="source4">Fourth observable source.</param>
            <param name="source5">Fifth observable source.</param>
            <param name="source6">Sixth observable source.</param>
            <param name="source7">Seventh observable source.</param>
            <param name="source8">Eighth observable source.</param>
            <param name="source9">Ninth observable source.</param>
            <param name="source10">Tenth observable source.</param>
            <param name="source11">Eleventh observable source.</param>
            <param name="source12">Twelfth observable source.</param>
            <param name="source13">Thirteenth observable source.</param>
            <param name="source14">Fourteenth observable source.</param>
            <param name="source15">Fifteenth observable source.</param>
            <param name="source16">Sixteenth observable source.</param>
            <param name="resultSelector"><c>(it, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12, it13, it14, it15, it16) =&gt;</c> Function to invoke for each series of elements at corresponding indexes in the sources.</param>
            <returns><see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> containing the result of combining elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Subscribe(System.String)">
            <summary>
            Subscribes an element handler to an observable sequence.
            </summary>
            <param name="onNext"><c>(it) =&gt;</c> Action to invoke for each element in the observable sequence.</param>
            <returns><see cref="T:System.IDisposable"/> object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Subscribe(System.String,System.String)">
            <summary>
            Subscribes an element handler and an exception handler to an observable sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element in the observable sequence.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke upon exceptional termination of the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Subscribe(System.String,System.String,System.String)">
            <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
            <param name="onNext"><c>(it) =></c> Action to invoke for each element in the observable sequence.</param>
            <param name="onError"><c>(ex) =></c> Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompleted"><c>() =></c> Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:XSpect.Yacq.Linq.YacqQbservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>The <paramref name="observer"/>'s interface that enables resources to be disposed.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.YacqExpression">
            <summary>
            Provides the base class from which the classes that represent YACQ expression tree nodes are derived.
            It also contains static factory methods to create the various node types. This is an abstract class.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.#ctor(XSpect.Yacq.SymbolTable)">
            <summary>
            Constructs a new instance of <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>.
            </summary>
            <param name="symbols">The symbol table linked with this expression.</param>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Reduce">
            <summary>
            Reduces this node to a simpler expression. If <see cref="P:XSpect.Yacq.Expressions.YacqExpression.CanReduce"/> returns <c>true</c>, this should return a valid expression.
            This method can return another node which itself must be reduced.
            </summary>
            <returns>
            The reduced expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Reduce(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables. Reducing is continued while the reduced expression is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            When implemented in a derived class, reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Text(XSpect.Yacq.SymbolTable,System.Char,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> that represents a string or a character from specified source string.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="quoteChar">The character which is used for quoting the text.</param>
            <param name="sourceText">The quoted inner string.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> which generates a string or a character from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Text(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> that represents a string or a character from specified source string.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="text">The string which contains quoting characters..</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> which generates a string or a character from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Text(System.Char,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> that represents a string or a character from specified source string.
            </summary>
            <param name="quoteChar">The character which is used for quoting the text.</param>
            <param name="sourceText">The quoted inner string.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> which generates a string or a character from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Text(System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> that represents a string or a character from specified source string.
            </summary>
            <param name="text">The string which contains quoting characters..</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TextExpression"/> which generates a string or a character from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(XSpect.Yacq.SymbolTable,XSpect.Yacq.Collections.YacqList)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(XSpect.Yacq.Collections.YacqList)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.List(System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that represents the list.
            </summary>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(XSpect.Yacq.SymbolTable,System.Type,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="type">&gt;The type of the parameter.</param>
            <param name="name">The name of this parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has the specified name and type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="type">&gt;The type of the parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has no name and specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name of this parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has the specified name and its type is not fixed.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(XSpect.Yacq.SymbolTable)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has no name and its type is not fixed.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(System.Type,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="type">&gt;The type of the parameter.</param>
            <param name="name">The name of this parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has the specified name and type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(System.Type)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="type">&gt;The type of the parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has no name and specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter(System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
            <param name="name">The name of this parameter.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that has the specified name and its type is not fixed.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousParameter">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> that represents the type-unfixed parameter expression.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Ignore(XSpect.Yacq.SymbolTable)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> that is ignored in the results.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Ignore">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> that is ignored in the results.
            </summary>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Macro(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that represents the macro, a pre-evaluate time expression preprocessor.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Macro(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that represents the macro, a pre-evaluate time expression preprocessor.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Macro(System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that represents the macro, a pre-evaluate time expression preprocessor.
            </summary>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Macro(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that represents the macro, a pre-evaluate time expression preprocessor.
            </summary>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.MacroExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Type,System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Type,System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="bodies">&gt;A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the bodies of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Linq.Expressions.Expression,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.AmbiguousLambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that represents the lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
            <param name="body">&gt;An <see cref="T:System.Linq.Expressions.Expression"/>  that represents the body of this expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters"/> collection.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Quote(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/> that returns specified expression.
            </summary>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Quote(System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/> that returns specified expression.
            </summary>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Quasiquote(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/> that returns specified expression with unquoting.
            </summary>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Quasiquote(System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/> that returns specified expression with unquoting.
            </summary>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.TypeCandidate(XSpect.Yacq.SymbolTable,System.Type[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that represents the type candidates, a symbol of type(s).
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="candidates">An array of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the candidate types of the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that has specified candidate types.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.TypeCandidate(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that represents the type candidates, a symbol of type(s).
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="candidates">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the candidate types of the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that has specified candidate types.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.TypeCandidate(System.Type[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that represents the type candidates, a symbol of type(s).
            </summary>
            <param name="candidates">An array of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the candidate types of the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that has specified candidate types.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.TypeCandidate(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that represents the type candidates, a symbol of type(s).
            </summary>
            <param name="candidates">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the candidate types of the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.TypeCandidateExpression"/> that has specified candidate types.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.SymbolTable,XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="P:XSpect.Yacq.Expressions.YacqExpression.Type"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Dispatch(XSpect.Yacq.Expressions.DispatchTypes,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the dispatching, member reference or method calls.
            </summary>
            <param name="dispatchType">The dispatching type.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Variable(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the member-reference dispatching, without the receiver.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name to use for dispatching.</param>
            <returns>A variable-reference <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Variable(System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the member-reference dispatching, without the receiver.
            </summary>
            <param name="name">The name to use for dispatching.</param>
            <returns>A variable-reference <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Function(XSpect.Yacq.SymbolTable,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the function-call dispatching, without the receiver.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A function-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Function(XSpect.Yacq.SymbolTable,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the function-call dispatching, without the receiver.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A function-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Function(System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the function-call dispatching, without the receiver.
            </summary>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A function-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Function(System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the function-call dispatching, without the receiver.
            </summary>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A function-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(XSpect.Yacq.SymbolTable,XSpect.Yacq.Collections.YacqList,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression[],XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(XSpect.Yacq.Collections.YacqList,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">A sequence that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(System.Linq.Expressions.Expression[],XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <param name="parameters">An array that contains <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/> objects to use to populate the <see cref="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters"/> collection.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements and parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.LambdaList(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that represents the lambda list to be <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Number(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.NumberExpression"/> that represents a number from specified source string.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="text">The source string of this expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.NumberExpression"/> which generates a number from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Number(System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.NumberExpression"/> that represents a number from specified source string.
            </summary>
            <param name="text">The source string of this expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.NumberExpression"/> which generates a number from specified string.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Identifier(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.IdentifierExpression"/> that represents identifier with specified name.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name of this expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.IdentifierExpression"/> that has the specified name.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Identifier(System.String)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.IdentifierExpression"/> that represents identifier with specified name.
            </summary>
            <param name="name">The name of this expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.IdentifierExpression"/> that has the specified name.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(XSpect.Yacq.SymbolTable,XSpect.Yacq.Collections.YacqList)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(XSpect.Yacq.Collections.YacqList)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="elements">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.Vector(System.Linq.Expressions.Expression[])">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that represents the vector.
            </summary>
            <param name="elements">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the elements of the expression.</param>
            <returns>A <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> that has specified elements.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExpression.SymbolTable(XSpect.Yacq.SymbolTable)">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.SymbolTableExpression"/> that represents the reference to the specified symbol table.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <returns>An <see cref="T:XSpect.Yacq.Expressions.SymbolTableExpression"/> that refers to the specified symbol table.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.NodeType">
            <summary>
            Gets the node type of this expression.
            </summary>
            <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType"/> values.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.CanReduce">
            <summary>
            Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.
            </summary>
            <returns><c>true</c> if the node can be reduced, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.Type">
            <summary>
            Gets the static type of the expression that this expression represents.
            </summary>
            <returns>The <see cref="T:System.Type"/> that represents the static type of the expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.Symbols">
            <summary>
            Gets the symbol table linked with this expression.
            </summary>
            <value>
            The symbol table linked with this expression.
            </value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.StartPosition">
            <summary>
            Gets the start position in the source for this expression.
            </summary>
            <value>The start position in the source for this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqExpression.EndPosition">
            <summary>
            Gets the end position in the source for this expression.
            </summary>
            <value>The end position in the source for this expression.</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.TextExpression">
            <summary>
            Represents an expression which is a string or a character.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.TextExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.TextExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.TextExpression.QuoteChar">
            <summary>
            Gets the character in <see cref="P:XSpect.Yacq.Expressions.TextExpression.SourceText"/> which is used to quote the string.
            </summary>
            <value>The character in <see cref="P:XSpect.Yacq.Expressions.TextExpression.SourceText"/> which is used to quote the string.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.TextExpression.SourceText">
            <summary>
            Gets the quoted inner string and source of constant string or character of this expression.
            </summary>
            <value>The quoted inner string and source of constant string or character of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.TextExpression.Value">
            <summary>
            Gets the constant string or character which this expression represents.
            </summary>
            <value>The constant string or character which this expression represents.</value>
        </member>
        <member name="T:XSpect.Yacq.SystemObjects.DocumentRepository">
            <summary>
            Provides management system for XML document files.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentRepository.#ctor(System.IO.DirectoryInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.DocumentRepository"/> class.
            </summary>
            <param name="searchPaths">An array which contains search paths for document XML files.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.DocumentRepository"/> class.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentRepository.GetDocument(System.String)">
            <summary>
            Gets the document which has specified name.
            </summary>
            <param name="name">The full name of the document (documentSetName/documentKey).</param>
            <returns>The document XML elements which has specified name.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentRepository.GetDocument(System.Reflection.MemberInfo)">
            <summary>
            Gets the document which is related with specified member.
            </summary>
            <param name="member">The member to get the related document.</param>
            <returns>The document XML elements which is related with <paramref name="member"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentRepository.GetDocument(System.Linq.Expressions.Expression)">
            <summary>
            Gets the document which is related with specified expression.
            </summary>
            <param name="expression">The expression to get the related document.</param>
            <returns>The document XML elements which is related with <paramref name="expression"/>.</returns>
        </member>
        <member name="P:XSpect.Yacq.SystemObjects.DocumentRepository.DocumentSets">
            <summary>
            Gets the collection of loaded <see cref="T:XSpect.Yacq.SystemObjects.DocumentSet"/>.
            </summary>
            <value>The collection of loaded <see cref="T:XSpect.Yacq.SystemObjects.DocumentSet"/>.</value>
        </member>
        <member name="P:XSpect.Yacq.SystemObjects.DocumentRepository.SearchPaths">
            <summary>
            Gets the list to search paths for document XML file.
            </summary>
            <value>The list to search paths for document XML file.</value>
        </member>
        <member name="T:XSpect.Yacq.SymbolDefinition">
            <summary>
            Represents value of symbol, the method that defines implementation of the symbol.
            </summary>
            <param name="expression">The <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> which will be reduced by this matched symbol.</param>
            <param name="symbols"><see cref="T:XSpect.Yacq.SymbolTable"/> which this matched symbol contains itself.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>Reduced expression.</returns>
        </member>
        <member name="T:XSpect.Yacq.ParseException">
            <summary>
            The exception that is thrown when the language system encountered errors about parsing.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="expression">The expression that explains the cause of the expression.</param>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.String,Parseq.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="position">The position in the source for the exception.</param>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.String,Parseq.Position,Parseq.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="startPosition">The start position in the source for the exception.</param>
            <param name="endPosition">The end position in the source for the exception.</param>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.String,System.Linq.Expressions.Expression,Parseq.Position,Parseq.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="expression">The expression that explains the cause of the expression.</param>
            <param name="startPosition">The start position in the source for the exception.</param>
            <param name="endPosition">The end position in the source for the exception.</param>
        </member>
        <member name="M:XSpect.Yacq.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.ParseException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:XSpect.Yacq.ParseException.Expression">
            <summary>
            Gets the expression to explain the cause of the expression.
            </summary>
            <value>The expression to explain the cause of the expression.</value>
        </member>
        <member name="P:XSpect.Yacq.ParseException.StartPosition">
            <summary>
            Gets the start position in the source for the exception.
            </summary>
            <value>The start position in the source for the exception.</value>
        </member>
        <member name="P:XSpect.Yacq.ParseException.EndPosition">
            <summary>
            Gets the end position in the source for the exception.
            </summary>
            <value>The end position in the source for the exception.</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.ListExpression">
            <summary>
            Represents a list, the basic expression of YACQ to call functions, methods and constructors.
            </summary>
        </member>
        <member name="T:XSpect.Yacq.Expressions.YacqSequenceExpression">
            <summary>
            Provides the base class from which the classes that represent YACQ sequence expression tree nodes are derived. This is an abstract class.
            </summary>
            <remarks>
            Sequence expressions are YACQ expression that can contain 0 or more expressions as its elements.
            </remarks>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqSequenceExpression.#ctor(XSpect.Yacq.SymbolTable,XSpect.Yacq.Collections.YacqList)">
            <summary>
            Constructs a new instance of <see cref="T:XSpect.Yacq.Expressions.YacqSequenceExpression"/>.
            </summary>
            <param name="symbols">The symbol table linked with this expression.</param>
            <param name="elements">A <see cref="T:XSpect.Yacq.Collections.YacqList"/> object that represents the elements of the expression.</param>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqSequenceExpression.AsList">
            <summary>
            Creates <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> from the symbol table and elements of this expression.
            </summary>
            <returns><see cref="T:XSpect.Yacq.Expressions.ListExpression"/> which has same symbol table and elements of this expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqSequenceExpression.AsVector">
            <summary>
            Creates <see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> from the symbol table and elements of this expression.
            </summary>
            <returns><see cref="T:XSpect.Yacq.Expressions.VectorExpression"/> which has same symbol table and elements of this expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqSequenceExpression.AsLambdaList">
            <summary>
            Creates <see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> from the symbol table and elements of this expression.
            </summary>
            <returns><see cref="T:XSpect.Yacq.Expressions.LambdaListExpression"/> which has same symbol table and elements of this expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqSequenceExpression.Elements">
            <summary>
            Gets a sequence of expressions that represent elements of this expression.
            </summary>
            <value>A sequence of expressions that represent elements of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqSequenceExpression.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in this sequence expression.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <value>The element at the specified index in this sequence expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqSequenceExpression.IsEmpty">
            <summary>
            Gets a value that indicates whether this sequence expression is empty.
            </summary>
            <value><c>true</c> if this sequence expression has no elements; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.YacqSequenceExpression.Length">
            <summary>
            Gets the number of elements contained in this sequence expression.
            </summary>
            <value>The number of elements contained in this sequence expression.</value>
        </member>
        <member name="M:XSpect.Yacq.Expressions.ListExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.ListExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression">
            <summary>
            Represents an ambiguous parameter expression, a parameter expression which may be type-unfixed.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousParameterExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousParameterExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousParameterExpression.Type">
            <summary>
            Gets the static type of the expression that this expression represents.
            </summary>
            <value>The <see cref="T:System.Type"/> that represents the static type of the expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousParameterExpression.Name">
            <summary>
            Gets the name of this parameter.
            </summary>
            <value>The name of this parameter.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousParameterExpression.IsUnfixed">
            <summary>
            Gets a value indicating whether the type of this parameter is unfixed.
            </summary>
            <value><c>true</c> if the type of this parameter is unfixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XSpect.Yacq.Static`1">
            <summary>
            Specify the symbol is for static call, not instance call. Use only for <see cref="T:XSpect.Yacq.SymbolEntry"/>.
            </summary>
            <typeparam name="T">The type which specify for the symbol's LeftType.</typeparam>
        </member>
        <member name="M:XSpect.Yacq.Static`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.IgnoredExpression">
            <summary>
            Represents an expression that is ignored in the results.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.IgnoredExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.IgnoredExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="T:XSpect.Yacq.SymbolTable">
            <summary>
            Represents a dictionary of symbols, the mechanism to hook all member references and method calls.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Clear">
            <summary>
            Removes all symbols from this symbol table..
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ContainsKey(XSpect.Yacq.SymbolEntry)">
            <summary>
            Determines whether the specified symbol is contained in this symbol table.
            </summary>
            <param name="key">The symbol key to locate in this symbol table.</param>
            <returns>
            <c>true</c> if this symbol table contains an element with the symbol key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition)">
            <summary>
            Adds a symbol with the provided symbol key and value to this symbol table.
            </summary>
            <param name="key">The symbol key to add.</param>
            <param name="value">The symbol value to add.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Remove(XSpect.Yacq.SymbolEntry)">
            <summary>
            Removes the symbol with the specified symbol key from this symbol table.
            </summary>
            <param name="key">The symbol key to remove.</param>
            <returns>
            <c>true</c> if the symbol is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the symbol table.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryGetValue(XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The symbol key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(System.Collections.Generic.IEnumerable{XSpect.Yacq.SymbolTable},System.Collections.Generic.IDictionary{XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parents">Sequence of parents of this symbol table.</param>
            <param name="entries">Initial entries of this symbol table.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(System.Collections.Generic.IEnumerable{XSpect.Yacq.SymbolTable},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parents">Sequence of parents of this symbol table.</param>
            <param name="importingType">The type to add symbols from exported methods and fields.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(System.Collections.Generic.IEnumerable{XSpect.Yacq.SymbolTable})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parents">Sequence of parents of this symbol table.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(XSpect.Yacq.SymbolTable[])">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parents">Array of parents of this symbol table.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(XSpect.Yacq.SymbolTable,System.Collections.Generic.IDictionary{XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parent">Parent of this symbol table.</param>
            <param name="entries">Initial entries of this symbol table.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="parent">Parent of this symbol table.</param>
            <param name="importingType">The type to add symbols from exported methods and fields.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(System.Collections.Generic.IDictionary{XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="entries">Initial entries of this symbol table.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SymbolTable"/> class.
            </summary>
            <param name="importingType">The type to add symbols from exported methods and fields.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String,XSpect.Yacq.SymbolDefinition)">
            <summary>
            Adds the symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="definition">The <see cref="T:XSpect.Yacq.SymbolDefinition"/> of the symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.String,XSpect.Yacq.SymbolDefinition)">
            <summary>
            Adds the symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="definition">The <see cref="T:XSpect.Yacq.SymbolDefinition"/> of the symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Add the literal symbol to this symbol table.
            </summary>
            <param name="name">The literal symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="expression">The symbol's literal value.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String,XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Adds the alias symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="targetDispatchType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="targetLeftType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="targetName">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.String,XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Adds the alias symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="targetDispatchType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="targetLeftType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="targetName">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String,XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Adds the alias symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="targetDispatchType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="targetName">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(XSpect.Yacq.Expressions.DispatchTypes,System.String,XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Adds the alias symbol to this symbol table.
            </summary>
            <param name="dispatchType">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="targetDispatchType">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="targetName">The target symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Add(System.String,System.String)">
            <summary>
            Adds the alias literal symbol to this symbol table.
            </summary>
            <param name="name">The literal symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="targetName">The target literal symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Import(System.Type)">
            <summary>
            Adds symbols from method and fields, which has <see cref="T:XSpect.Yacq.YacqSymbolAttribute"/>, in specified class.
            </summary>
            <param name="type">The type to add symbols from exported methods and fields.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ContainsKey(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Determines whether the specified symbol is contained in this symbol table.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> if this symbol table contains an element with the symbol key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ContainsKey(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Determines whether the specified symbol is contained in this symbol table.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> if this symbol table contains an element with the symbol key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ContainsKey(System.String)">
            <summary>
            Determines whether the specified literal symbol is contained in this symbol table.
            </summary>
            <param name="name">The literal's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> if this symbol table contains an element with the symbol key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ExistsKey(XSpect.Yacq.SymbolEntry)">
            <summary>
            Determines whether the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <param name="key">The symbol key to locate in this symbol table.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ExistsKey(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Determines whether the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ExistsKey(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Determines whether the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ExistsKey(System.String)">
            <summary>
            Determines whether the specified literal symbol is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <param name="name">The literal's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns><c>true</c> the specified literal symbol is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Remove(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Removes the symbol with the specified symbol key from this symbol table.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>
            <c>true</c> if the symbol is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the symbol table.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Remove(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Removes the symbol with the specified symbol key from this symbol table.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>
            <c>true</c> if the symbol is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the symbol table.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Remove(System.String)">
            <summary>
            Removes the literal symbol with the specified name from this symbol table.
            </summary>
            <param name="name">The literal symbol's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>
            <c>true</c> if the symbol is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the symbol table.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryGetValue(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the symbol from this symbol table with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryGetValue(XSpect.Yacq.Expressions.DispatchTypes,System.String,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the symbol from this symbol table with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryGetValue(System.String,System.Linq.Expressions.Expression@)">
            <summary>
            Gets the literal symbol from this symbol table with the specified name.
            </summary>
            <param name="name">The literal key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value of the specified literal symbol name, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified literal symbol key is contained in this symbol table; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Resolve(XSpect.Yacq.SymbolEntry)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key.
            </summary>
            <param name="key">The symbol key to get.</param>
            <returns>The symbol value with the specified symbol key.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Resolve(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Resolve(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Resolve(System.String)">
            <summary>
            Gets the literal symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the name.
            </summary>
            <param name="name">The literal's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The literal value of the specified name.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryResolve(XSpect.Yacq.SymbolEntry,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key.
            </summary>
            <param name="key">The symbol key to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryResolve(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key properties, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryResolve(XSpect.Yacq.Expressions.DispatchTypes,System.String,XSpect.Yacq.SymbolDefinition@)">
            <summary>
            Gets the symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified symbol key properties, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.TryResolve(System.String,System.Linq.Expressions.Expression@)">
            <summary>
            Gets the literal symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the name.
            </summary>
            <param name="name">The symbol literal's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified literal symbol key, if the key is found;
            otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the specified literal symbol key is contained in this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Match(XSpect.Yacq.SymbolEntry)">
            <summary>
            Gets the most appropriate symbol with the specified symbol key.
            </summary>
            <param name="key">The symbol key to get.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Match(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Gets the most appropriate symbol with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Match(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Gets the most appropriate symbol with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.Match(XSpect.Yacq.Expressions.DispatchExpression)">
            <summary>
            Gets the most appropriate symbol with the specified <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/>.
            </summary>
            <param name="expression">The <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> to use as symbol key properties.</param>
            <returns>The symbol value with the most appropriate to the specified <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ResolveMatch(XSpect.Yacq.SymbolEntry)">
            <summary>
            Gets the most appropriate symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key.
            </summary>
            <param name="key">The symbol key to get.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ResolveMatch(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Gets the most appropriate symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ResolveMatch(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Gets the most appropriate symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the most appropriate to the specified symbol key properties.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolTable.ResolveMatch(XSpect.Yacq.Expressions.DispatchExpression)">
            <summary>
            Gets the most appropriate symbol from this symbol table's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/> with the specified <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/>.
            </summary>
            <param name="expression">The <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> to use as symbol key properties.</param>
            <returns>The symbol value with the most appropriate to the specified <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/>.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Count">
            <summary>
            Gets the number of elements contained in the symbol table.
            </summary>
            <value>The number of elements contained in the symbol table</value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.IsReadOnly">
            <summary>
            Gets a value indicating whether this symbol table is read-only.
            </summary>
            <value><c>true</c> if this symbol table is read-only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Item(XSpect.Yacq.SymbolEntry)">
            <summary>
            Gets or sets the symbol value with the specified symbol key.
            </summary>
            <returns>The symbol value with the specified symbol key.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the symbol keys of this symbol table.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the symbol keys of this symbol table.</value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the symbol values of this symbol table.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the symbol values of this symbol table.</value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Parents">
            <summary>
            Gets the parent <see cref="T:XSpect.Yacq.SymbolTable"/> of this symbol table.
            </summary>
            <value>
            The parent <see cref="T:XSpect.Yacq.SymbolTable"/> of this symbol table.
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Missing">
            <summary>
            Gets or sets the symbol value of the missing symbol, the failback code if any symbol is matched.
            </summary>
            <returns>the symbol value of the missing symbol.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Chain">
            <summary>
            Gets the sequence of <see cref="P:XSpect.Yacq.SymbolTable.Parents"/>, from this instance to the <see cref="P:XSpect.Yacq.SymbolTable.Root"/>.
            </summary>
            <value>
            The sequence of <see cref="P:XSpect.Yacq.SymbolTable.Parents"/>, from this instance to the <see cref="P:XSpect.Yacq.SymbolTable.Root"/>.
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.AllKeys">
            <summary>
            Gets all symbol keys in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </summary>
            <value>
            All symbol keys in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.AllValues">
            <summary>
            Gets all symbol values in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </summary>
            <value>
            All symbol values in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Literals">
            <summary>
            Gets literal values of symbols which is marked as <see cref="F:XSpect.Yacq.Expressions.DispatchTypes.Literal"/>.
            </summary>
            <value>
            Literal values of symbols which is marked as <see cref="F:XSpect.Yacq.Expressions.DispatchTypes.Literal"/>.
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.AllLiterals">
            <summary>
            Gets all literal values in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </summary>
            <value>
            All literal values in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>,
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Flatten">
            <summary>
            Gets the dictionary which contains all symbols in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <value>
            The dictionary which contains all symbols in this instance's <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Hash">
            <summary>
            Gets the hash value of this symbol table.
            </summary>
            <value>
            The hash value of this symbol table.
            </value>>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.AllHash">
            <summary>
            Gets the hash value of all symbol tables in <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </summary>
            <value>
            The hash value of all symbol tables in <see cref="P:XSpect.Yacq.SymbolTable.Chain"/>.
            </value>&gt;
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Item(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Gets or sets the symbol with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="leftType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the specified symbol key properties.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Item(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Gets or sets the symbol with the specified symbol key properties.
            </summary>
            <param name="dispatchType">The key's <see cref="P:XSpect.Yacq.SymbolEntry.DispatchType"/>.</param>
            <param name="name">The key's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The symbol value with the specified symbol key properties.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Item(System.String)">
            <summary>
            Gets or sets the literal symbol with the name.
            </summary>
            <param name="name">The literal's <see cref="P:XSpect.Yacq.SymbolEntry.Name"/>.</param>
            <returns>The literal value of the specified name.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolTable.Root">
            <summary>
            Returns the root <see cref="T:XSpect.Yacq.SymbolTable"/>, the common symbols for all <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>.
            </summary>
            <value>
            The root <see cref="T:XSpect.Yacq.SymbolTable"/>, the common symbols for all <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>.
            </value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.MacroExpression">
            <summary>
            Represents an macro expression, which is invocable like lambdas, but they are reduced into another expression in pre-evaluate time.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.MacroExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.MacroExpression.Evaluate(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Evaluates this macro expression.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="arguments">The arguments of this macro expression.</param>
            <returns>Result expression of applying this macro expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.MacroExpression.Evaluate(XSpect.Yacq.SymbolTable,System.Linq.Expressions.Expression[])">
            <summary>
            Evaluates this macro expression.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="arguments">The arguments of this macro expression.</param>
            <returns>Result expression of applying this macro expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.MacroExpression.Evaluate(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Evaluates this macro expression.
            </summary>
            <param name="arguments">The arguments of this macro expression.</param>
            <returns>Result expression of applying this macro expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.MacroExpression.Evaluate(System.Linq.Expressions.Expression[])">
            <summary>
            Evaluates this macro expression.
            </summary>
            <param name="arguments">The arguments of this macro expression.</param>
            <returns>Result expression of applying this macro expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.MacroExpression.Body">
            <summary>
            Gets the body expression in this expression.
            </summary>
            <value>The body expression in this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.MacroExpression.Parameters">
            <summary>
            Gets the parameters of this expression.
            </summary>
            <value>The parameters of this expression.</value>
            <remarks>All parameters must be typed as <see cref="T:System.Linq.Expressions.Expression"/>. Unfixed parameter means to accept <see cref="T:System.Linq.Expressions.Expression"/>.</remarks>
        </member>
        <member name="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression">
            <summary>
            Represents an ambiguous lambda expression, a lambda expression with <see cref="T:XSpect.Yacq.Expressions.AmbiguousParameterExpression"/>.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ApplyTypeArguments(System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.AmbiguousParameterExpression})">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with specified parameter types.
            </summary>
            <param name="parameters">The types for paramaters of new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.</param>
            <returns>The new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with specified parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ApplyTypeArguments(System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with specified type argument map.
            </summary>
            <param name="typeArgumentMap">The type argument map for parameters of new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.</param>
            <returns>The new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with parameters which is specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ApplyTypeArguments(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with specified parameter types.
            </summary>
            <param name="types">The types for paramaters of new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.</param>
            <returns>The new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> with parameters which is specified type.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ApplyTypeArguments(System.Type)">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> to match specified delegate type.
            </summary>
            <param name="delegateType">The delegate type which is matched for new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.</param>
            <returns>The new <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/> which is matched with <paramref name="delegateType"/>.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.ReturnType">
            <summary>
            Gets the return type of this expression.
            </summary>
            <value>The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Bodies">
            <summary>
            Gets the body expressions in this expression.
            </summary>
            <value>The body expressions in this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.Parameters">
            <summary>
            Gets the ambiguous parameters of this expression.
            </summary>
            <value>The ambiguous parameters of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.AmbiguousLambdaExpression.UnfixedParameters">
            <summary>
            Get the ambiguous parameters of this expression which is not fixed its type.
            </summary>
            <value>The ambiguous parameters of this expression which is not fixed its type.</value>
        </member>
        <member name="T:XSpect.Yacq.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:XSpect.Yacq.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:XSpect.Yacq.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:XSpect.Yacq.Properties.Resources.root_symbols">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;members&gt;
                &lt;member name=&quot;Y:(=)&quot;&gt;
                    &lt;summary&gt;Performs Assign operation.&lt;/summary&gt;
                    &lt;param name=&quot;0&quot;&gt;The first operand value.&lt;/param&gt;
                    &lt;param name=&quot;1&quot;&gt;The second operand values.&lt;/param&gt;
                    &lt;returns&gt;The result value of Assign operation.&lt;/returns&gt;
                &lt;/member&gt;
                &lt;member name=&quot;Y:(+)&quot;&gt;
                    &lt;summary&gt;Performs Add, Concatenate (strings) or Unary Plus operation.&lt;/summary&gt;
                    &lt;param name=&quot;0&quot;&gt;The first operand value, or just only on [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:XSpect.Yacq.Expressions.QuotedExpression">
            <summary>
            Represents a quoted expression, it returns an <see cref="P:XSpect.Yacq.Expressions.QuotedExpression.Expression"/> objects.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.QuotedExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.QuotedExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.QuotedExpression.QuoteType">
            <summary>
            Gets the type of quoting of this expression.
            </summary>
            <value>The type of quoting of this expression</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.QuotedExpression.Expression">
            <summary>
            Gets an <see cref="P:XSpect.Yacq.Expressions.QuotedExpression.Expression"/> that represents the return value of this expression.
            </summary>
            <value>An <see cref="P:XSpect.Yacq.Expressions.QuotedExpression.Expression"/> that represents the return value of this expression.</value>
        </member>
        <member name="T:XSpect.Yacq.Collections.YacqList">
            <summary>
            Represents immutable singly linked list of expressions.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.#ctor(System.Linq.Expressions.Expression,XSpect.Yacq.Collections.YacqList)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.Collections.YacqList"/> class.
            </summary>
            <param name="head">The first element of the list.</param>
            <param name="tail">The list of rest elements of the list.</param>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.Create(System.Linq.Expressions.Expression,XSpect.Yacq.Collections.YacqList)">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.
            </summary>
            <param name="head">The first element of the list.</param>
            <param name="tail">The list of rest elements of the list.</param>
            <returns>The <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.Create(System.Linq.Expressions.Expression)">
            <summary>
            Creates new terminal <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.
            </summary>
            <param name="head">The first element of the list.</param>
            <returns>The terminal <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.Create(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates new <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.
            </summary>
            <param name="elements">The elements of the list.</param>
            <returns>The <see cref="T:XSpect.Yacq.Collections.YacqList"/> object which contains specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Collections.YacqList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.Empty">
            <summary>
            Gets empty list. Empty lists are used to indicate the terminal of the list.
            </summary>
            <value>The empty list object, its <see cref="P:XSpect.Yacq.Collections.YacqList.Head"/> and <see cref="P:XSpect.Yacq.Collections.YacqList.Tail"/> is <c>null</c>.</value>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.Head">
            <summary>
            Gets the first element of this list.
            </summary>
            <value>The first element of this list.</value>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.Tail">
            <summary>
            Gets the list without the first element of this list.
            </summary>
            <value>The list without the first element.</value>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in this list.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <value>The element at the specified index in this list.</value>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.Length">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <value>The number of elements contained in this list.</value>
        </member>
        <member name="P:XSpect.Yacq.Collections.YacqList.IsEmpty">
            <summary>
            Gets a value that indicates whether this list is empty.
            </summary>
            <value><c>true</c> if this sequence expression has no elements; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.DispatchTypes">
            <summary>
            Specifies flags for symbol targets and attributes.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.Unknown">
            <summary>
            Specifies the symbol has no targets, or no condition to search symbols. This is default value of <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/>.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.Member">
            <summary>
            Specifies the symbol is targeted to member access (just a identifiers, fields, or properties).
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.Method">
            <summary>
            Specifies the symbol is targeted to method call (just a functions or methods).
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.Constructor">
            <summary>
            Specifies the symbol is targeted to constructor call.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.MethodGroup">
            <summary>
            Not implemented. This is a target flag.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.TargetMask">
            <summary>
            Specifies symbol target information.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.DispatchTypes.Literal">
            <summary>
            Specifies the symbol is literal; it means that its implementation constantly returns same expressions, regardless of arguments of <see cref="T:XSpect.Yacq.SymbolDefinition"/>.
            </summary>
        </member>
        <member name="T:XSpect.Yacq.LanguageServices.Reader">
            <summary>
            Generates pre-evaluating <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/> by supplied rules from code string sequence.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.LanguageServices.Reader.#ctor(Parseq.Parser{System.Char,System.Collections.Generic.IEnumerable{XSpect.Yacq.Expressions.YacqExpression}})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.LanguageServices.Reader"/> class.
            </summary>
            <param name="parser">The sequence of additional rules.</param>
        </member>
        <member name="M:XSpect.Yacq.LanguageServices.Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.LanguageServices.Reader"/> class.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.LanguageServices.Reader.Read(System.String)">
            <summary>
            Reads the code string and generates expressions.
            </summary>
            <param name="input">The code string to read.</param>
            <returns>Generated expressions.</returns>
        </member>
        <member name="P:XSpect.Yacq.LanguageServices.Reader.Parser">
            <summary>
            Gets the parser of Yacq.
            </summary>
            <value>The parser of Yacq.</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.TypeCandidateExpression">
            <summary>
            Represents an expression which is a type candidate, a symbol of types and indicates static references.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.TypeCandidateExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.TypeCandidateExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.TypeCandidateExpression.Candidates">
            <summary>
            Gets the candidate types of this expression.
            </summary>
            <value>The candidate types of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.TypeCandidateExpression.ElectedType">
            <summary>
            Gets the <see cref="T:System.Type"/> object which indicates the most appropriate type of <see cref="P:XSpect.Yacq.Expressions.TypeCandidateExpression.Candidates"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> object which indicates the most appropriate type of <see cref="P:XSpect.Yacq.Expressions.TypeCandidateExpression.Candidates"/>,
            or <c>null</c> if no appropriate types in this expression</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.DispatchExpression">
            <summary>
            Represents an dispatch expression, an abstract layer to member references and method calls with <see cref="T:XSpect.Yacq.SymbolTable"/>.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.DispatchExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.DispatchExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.DispatchExpression.DefaultMissing(XSpect.Yacq.Expressions.DispatchExpression,XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Default definition method of <see cref="P:XSpect.Yacq.SymbolTable.Missing"/>.
            </summary>
            <param name="e">The expression to be reduced.</param>
            <param name="s">The symbol table which this symbol (value) belongs.</param>
            <param name="t">The expected <see cref="P:System.Linq.Expressions.Expression.Type"/> from the caller, or <c>null</c> if any type will be accepted.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.DispatchExpression.GetMembers(XSpect.Yacq.SymbolTable,System.Type[])">
            <summary>
            Gets all members and extension methods in specified types.
            </summary>
            <param name="symbols">The symbol table for search extension methods.</param>
            <param name="types">Types to get members.</param>
            <returns>All members and extension methods in <paramref name="types"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.DispatchExpression.GetMembers(XSpect.Yacq.SymbolTable,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets all members and extension methods in specified types.
            </summary>
            <param name="symbols">The symbol table for search extension methods.</param>
            <param name="types">Types to get members.</param>
            <returns>All members and extension methods in <paramref name="types"/>.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.DispatchExpression.DispatchType">
            <summary>
            Gets the type of dispatching of this expression.
            </summary>
            <value>The type of dispatching of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.DispatchExpression.Left">
            <summary>
            Gets an <see cref="T:System.Linq.Expressions.Expression"/> that represents the receiver or static reference for dispatching.
            </summary>
            <value>An <see cref="T:System.Linq.Expressions.Expression"/> that represents the receiver or static reference for dispatching.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.DispatchExpression.Name">
            <summary>
            Gets the name for dispatching.
            </summary>
            <value>The name for dispatching.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.DispatchExpression.TypeArguments">
            <summary>
            Gets a collection of types that represent type arguments for dispatching.
            </summary>
            <value>a collection of types that represent type arguments for dispatching.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.DispatchExpression.Arguments">
            <summary>
            Gets a collection of expressions that represent arguments for dispatching.
            </summary>
            <value>a collection of expressions that represent arguments for dispatching.</value>
        </member>
        <member name="T:XSpect.Yacq.SymbolEntry">
            <summary>
            Represents key of symbol,
            </summary>
        </member>
        <member name="F:XSpect.Yacq.SymbolEntry.Missing">
            <summary>
            Represents the key of the missing symbol, the failback code if any symbol is matched.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.#ctor(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.SymbolEntry"/>.
            </summary>
            <param name="dispatchType">The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.</param>
            <param name="leftType">The target of this symbol.</param>
            <param name="name">The name of this symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.#ctor(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.SymbolEntry"/>.
            </summary>
            <param name="dispatchType">The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.</param>
            <param name="name">The name of this symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.SymbolEntry"/> as a literal.
            </summary>
            <param name="name">The name of this symbol as a literal.</param>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Equals(XSpect.Yacq.SymbolEntry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Boolean)">
            <summary>
            Converts the expression representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression that contains a symbol entry to convert.</param>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="isLiteral"><c>true</c> if the symbol entry indicates a literal; otherwise, <c>false</c>.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable)">
            <summary>
            Converts the expression representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression that contains a symbol entry to convert.</param>
            <param name="symbols">The symbol table for the expression.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.Linq.Expressions.Expression)">
            <summary>
            Converts the expression representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression that contains a symbol entry to convert.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.String,XSpect.Yacq.SymbolTable,System.Boolean)">
            <summary>
            Converts the string representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression string that contains a symbol entry to convert.</param>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="isLiteral"><c>true</c> if the symbol entry indicates a literal; otherwise, <c>false</c>.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.String,XSpect.Yacq.SymbolTable)">
            <summary>
            Converts the string representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression string that contains a symbol entry to convert.</param>
            <param name="symbols">The symbol table for the expression.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.Parse(System.String)">
            <summary>
            Converts the string representation of a symbol entry to an equivalent <see cref="T:XSpect.Yacq.SymbolEntry"/> object.
            </summary>
            <param name="expression">An expression string that contains a symbol entry to convert.</param>
            <returns>An object that is equivalent to the symbol entry specified in the <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.TypeMatch(System.Type,System.Type)">
            <summary>
            Determines whether the specified type matches with the target type.
            </summary>
            <param name="test">The type to test match.</param>
            <param name="target">The targe type of match.</param>
            <returns><c>true</c> if <paramref name="test"/> matches with <paramref name="target"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SymbolEntry.TypeMatch(System.Type)">
            <summary>
            Determines whether <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/> matches with the target type.
            </summary>
            <param name="target">The targe type of match.</param>
            <returns><c>true</c> if <see cref="P:XSpect.Yacq.SymbolEntry.LeftType"/> matches with <paramref name="target"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:XSpect.Yacq.SymbolEntry.DispatchType">
            <summary>
            Gets the target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.
            </summary>
            <value>
            The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.
            </value>
        </member>
        <member name="P:XSpect.Yacq.SymbolEntry.LeftType">
            <summary>
            Gets the target type of this symbol.
            </summary>
            <value>
            The target type of this symbol.
            </value>
            <remarks>
            If this value is <c>null</c>, this symbol is targeted to non-objective (global) call.
            </remarks>
        </member>
        <member name="P:XSpect.Yacq.SymbolEntry.Name">
            <summary>
            Gets the name of this symbol.
            </summary>
            <value>
            The name of this symbol.
            </value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.LambdaListExpression">
            <summary>
            Represents an lambda list, a list to be a <see cref="T:XSpect.Yacq.Expressions.AmbiguousLambdaExpression"/>.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.LambdaListExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.LambdaListExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.LambdaListExpression.Parameters">
            <summary>
            Gets the ambiguous parameters of this expression.
            </summary>
            <value>The ambiguous parameters of this expression.</value>
        </member>
        <member name="T:XSpect.Yacq.SystemObjects.DocumentSet">
            <summary>
            Represents a XML document file to search by its name, member, or expression.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.DocumentSet"/> class.
            </summary>
            <param name="xmlFile">The XML file to read.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.DocumentSet"/> class.
            </summary>
            <param name="stream">The stream to read the XML file.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.DocumentSet"/> class.
            </summary>
            <param name="xml">The XML string to read.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.GetDocument(System.Reflection.MemberInfo)">
            <summary>
            Gets the document which is related with specified member.
            </summary>
            <param name="member">The member to get the related document.</param>
            <returns>The document XML elements which is related with <paramref name="member"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.GetDocument(System.String)">
            <summary>
            Gets the document which has specified name.
            </summary>
            <param name="name">The document name to search.</param>
            <returns>The document XML elements which is named as <paramref name="name"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.GetXmlDocumentName(System.Reflection.MemberInfo)">
            <summary>
            Gets the formatted string which represents specified member in name attribute of XML code documents.
            </summary>
            <param name="member">Member to get the name.</param>
            <returns>The formatted string which represents specified member in name attribute of XML code documents.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.DocumentSet.GetXmlDocumentName(XSpect.Yacq.SymbolEntry)">
            <summary>
            Gets the formatted string which represents specified symbol entry in name attribute of XML code documents.
            </summary>
            <param name="key">Symbol entry to get the name.</param>
            <returns>The formatted string which represents specified symbol entry in name attribute of XML code documents.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.NumberExpression">
            <summary>
            Represents an expression which is a number.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.NumberExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.NumberExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.NumberExpression.SourceText">
            <summary>
            Gets the original string and source of constant number of this expression.
            </summary>
            <value>The original string and source of constant number of this expression.</value>
        </member>
        <member name="P:XSpect.Yacq.Expressions.NumberExpression.Value">
            <summary>
            Gets the constant number which this expression represents.
            </summary>
            <value>The constant number which this expression represents.</value>
        </member>
        <member name="T:XSpect.Yacq.YacqServices">
            <summary>
            Provides language service static methods, generate expression trees from code strings with (optional) data.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ReadAll(XSpect.Yacq.LanguageServices.Reader,System.String)">
            <summary>
            Read code string and generate expressions without reducing.
            </summary>
            <param name="reader">The <see cref="T:XSpect.Yacq.LanguageServices.Reader"/> to read the code string.</param>
            <param name="code">Code string to read.</param>
            <returns>All expressions without reducing, generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Read(XSpect.Yacq.LanguageServices.Reader,System.String)">
            <summary>
            Read code string and generate expressions without reducing.
            </summary>
            <param name="reader">The <see cref="T:XSpect.Yacq.LanguageServices.Reader"/> to read the code string.</param>
            <param name="code">Code string to read.</param>
            <returns>All expressions without reducing, generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ReadAll(System.String)">
            <summary>
            Read code string and generate expressions without reducing.
            </summary>
            <param name="code">Code string to read.</param>
            <returns>All expressions without reducing, generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Read(System.String)">
            <summary>
            Read code string and generate expressions without reducing.
            </summary>
            <param name="code">Code string to read.</param>
            <returns>All expressions without reducing, generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAll(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string and generate expressions.
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse.</param>
            <returns>All expressions generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Parse(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string and generate expressions, only return the last expression.
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse.</param>
            <returns>The last expressions generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(XSpect.Yacq.SymbolTable,System.Type,System.String,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Parse code string as the body of the function and generate lambda expression with specified parameters.
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameters">Parameters of the function.</param>
            <returns>The lambda expressions generated from the code and specified parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(XSpect.Yacq.SymbolTable,System.String,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Parse code string as the body of the function and generate lambda expression with specified parameters.
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameters">Parameters of the function.</param>
            <returns>The lambda expressions generated from the code and specified parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(XSpect.Yacq.SymbolTable,System.Type,System.Type,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with only one parameter named "it".
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="itType">The type of "it" parameter.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(XSpect.Yacq.SymbolTable,System.Type,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with only one parameter named "it".
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="itType">The type of "it" parameter.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda``1(XSpect.Yacq.SymbolTable,System.String,System.String[])">
            <summary>
            Parse code string as the body of function and generate lambda expression with specified parameter names.
            </summary>
            <typeparam name="TDelegate">The type of the delegate that the generating lambda expression represents.</typeparam>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameterNames">Parameter names of the function. Their types are inferred by <typeparamref name="TDelegate"/>.</param>
            <returns>The type-explicit lambda expression generated from the code and specified parameter names.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAction(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with no return value and no parameters.
            </summary>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function.</param>
            <returns>The lambda expression generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAction``1(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with no return value and only one parameter named "it".
            </summary>
            <typeparam name="T">The type of "it" parameter.</typeparam>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseFunc``1(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with return value and no parameters.
            </summary>
            <typeparam name="TReturn">The return type of the generating lambda expression.</typeparam>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function.</param>
            <returns>The lambda expression generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseFunc``2(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with return value and only one parameter named "it".
            </summary>
            <typeparam name="T">The type of "it" parameter.</typeparam>
            <typeparam name="TReturn">The return type of the generating lambda expression.</typeparam>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAll(System.String)">
            <summary>
            Parse code string and generate expressions.
            </summary>
            <param name="code">Code string to parse.</param>
            <returns>All expressions generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Parse(System.String)">
            <summary>
            Parse code string and generate expressions, only return the last expression.
            </summary>
            <param name="code">Code string to parse.</param>
            <returns>The last expressions generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(System.Type,System.String,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Parse code string as the body of the function and generate lambda expression with specified parameters.
            </summary>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameters">Parameters of the function.</param>
            <returns>The lambda expressions generated from the code and specified parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(System.String,XSpect.Yacq.Expressions.AmbiguousParameterExpression[])">
            <summary>
            Parse code string as the body of the function and generate lambda expression with specified parameters.
            </summary>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameters">Parameters of the function.</param>
            <returns>The lambda expressions generated from the code and specified parameters.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(System.Type,System.Type,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with only one parameter named "it".
            </summary>
            <param name="itType">The type of "it" parameter.</param>
            <param name="returnType">The return type of this expression; typeof(<see cref="T:System.Void"/>) indicates this expression doesn't return value, or <c>null</c> if undetermined.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda(System.Type,System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with only one parameter named "it".
            </summary>
            <param name="itType">The type of "it" parameter.</param>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseLambda``1(System.String,System.String[])">
            <summary>
            Parse code string as the body of function and generate lambda expression with specified parameter names.
            </summary>
            <typeparam name="TDelegate">The type of the delegate that the generating lambda expression represents.</typeparam>
            <param name="code">Code string to parse as the body of function. The code can contain specified parameter symbol names.</param>
            <param name="parameterNames">Parameter names of the function. Their types are inferred by <typeparamref name="TDelegate"/>.</param>
            <returns>The type-explicit lambda expression generated from the code and specified parameter names.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAction(System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with no return value and no parameters.
            </summary>
            <param name="code">Code string to parse as the body of function.</param>
            <returns>The lambda expression generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseAction``1(System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with no return value and only one parameter named "it".
            </summary>
            <typeparam name="T">The type of "it" parameter.</typeparam>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseFunc``1(System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with return value and no parameters.
            </summary>
            <typeparam name="TReturn">The return type of the generating lambda expression.</typeparam>
            <param name="code">Code string to parse as the body of function.</param>
            <returns>The lambda expression generated from the code.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.ParseFunc``2(System.String)">
            <summary>
            Parse code string as the body of function and generate lambda expression with return value and only one parameter named "it".
            </summary>
            <typeparam name="T">The type of "it" parameter.</typeparam>
            <typeparam name="TReturn">The return type of the generating lambda expression.</typeparam>
            <param name="code">Code string to parse as the body of function. The code can contain the parameter symbol name (it).</param>
            <returns>The lambda expression generated from the code and the parameter.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Collections.IEnumerable,XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Collections.Generic.IEnumerable{``0},XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Linq.IQueryable,XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Linq.IQueryable{``0},XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.IObservable{``0},XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.IObservable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Reactive.Linq.IQbservable,XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Reactive.Linq.IQbservable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Reactive.Linq.IQbservable{``0},XSpect.Yacq.SymbolTable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Reactive.Linq.IQbservable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/>.</param>
            <param name="symbols">Additional <see cref="T:XSpect.Yacq.SymbolTable"/> for resolve symbols.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Collections.IEnumerable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Linq.IQueryable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Linq.IQueryable{``0})">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQueryable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.IObservable{``0})">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.IObservable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq(System.Reactive.Linq.IQbservable)">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <param name="source">An <see cref="T:System.Reactive.Linq.IQbservable"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="M:XSpect.Yacq.YacqServices.Yacq``1(System.Reactive.Linq.IQbservable{``0})">
            <summary>
            Enables querying with YACQ code strings.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Reactive.Linq.IQbservable`1"/> to convert to a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/>.</param>
            <returns>The source as a <see cref="T:XSpect.Yacq.Linq.YacqQbservable`1"/> to access to YACQ query operator methods.</returns>
        </member>
        <member name="P:XSpect.Yacq.YacqServices.Version">
            <summary>
            Gets the version of this YACQ library.
            </summary>
            <returns>The version of this YACQ library.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.IdentifierExpression">
            <summary>
            Represents an expression which is an identifier.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.IdentifierExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.IdentifierExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="P:XSpect.Yacq.Expressions.IdentifierExpression.Name">
            <summary>
            Gets the name of this expression.
            </summary>
            <value>The name of this expression.</value>
        </member>
        <member name="T:XSpect.Yacq.YacqSymbolAttribute">
            <summary>
            Indicates that a method or field is exported as symbols with specified <see cref="T:XSpect.Yacq.SymbolEntry"/> keys.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.YacqSymbolAttribute.#ctor(XSpect.Yacq.Expressions.DispatchTypes,System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.YacqSymbolAttribute"/> class.
            </summary>
            <param name="dispatchType">The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.</param>
            <param name="leftType">The target of this symbol.</param>
            <param name="name">The name of this symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.YacqSymbolAttribute.#ctor(XSpect.Yacq.Expressions.DispatchTypes,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.YacqSymbolAttribute"/> class.
            </summary>
            <param name="dispatchType">The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.</param>
            <param name="name">The name of this symbol.</param>
        </member>
        <member name="M:XSpect.Yacq.YacqSymbolAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:XSpect.Yacq.YacqSymbolAttribute"/> class.
            </summary>
            <param name="name">The name of this symbol as a literal.</param>
        </member>
        <member name="P:XSpect.Yacq.YacqSymbolAttribute.DispatchType">
            <summary>
            Gets the target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.
            </summary>
            <value>
            The target <see cref="T:XSpect.Yacq.Expressions.DispatchTypes"/> of this symbol.
            </value>
        </member>
        <member name="P:XSpect.Yacq.YacqSymbolAttribute.LeftType">
            <summary>
            Gets the target type of this symbol.
            </summary>
            <value>
            The target type of this symbol.
            </value>
            <remarks>
            If this value is <c>null</c>, this symbol is targeted to non-objective (global) call.
            </remarks>
        </member>
        <member name="P:XSpect.Yacq.YacqSymbolAttribute.Name">
            <summary>
            Gets the name of this symbol.
            </summary>
            <value>
            The name of this symbol.
            </value>
        </member>
        <member name="T:XSpect.Yacq.SystemObjects.ModuleLoader">
            <summary>
            Loads YACQ text scripts, binary scripts, and libraries.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.SystemObjects.ModuleLoader.FilePrefix">
            <summary>
            Represents the prefix to load symbols from the filesystem. This field is constant.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.SystemObjects.ModuleLoader.ResourcePrefix">
            <summary>
            Represents the prefix to load symbols from Yacq assembly resources. This field is constant.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.SystemObjects.ModuleLoader.CtsPrefix">
            <summary>
            Represents the prefix to load symbols from the CTS (Common Type System) tree (namespace import). This field is constant.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.SystemObjects.ModuleLoader.Extensions">
            <summary>
            Gets the extensions <see cref="T:XSpect.Yacq.SystemObjects.ModuleLoader"/> can load.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.ModuleLoader.#ctor(System.IO.DirectoryInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.ModuleLoader"/> class.
            </summary>
            <param name="searchPaths">An array which contains search paths for library files.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.ModuleLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.ModuleLoader"/> class.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.ModuleLoader.Load(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Load the file and apply to specified <see cref="T:XSpect.Yacq.SymbolTable"/>.
            </summary>
            <param name="symbols">The symbol table as the applying target.</param>
            <param name="name">Name of loading file. File extension can be omitted.</param>
            <returns>The return value expression of the loaded file.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.ModuleLoader.Import(XSpect.Yacq.SymbolTable,System.String,System.String)">
            <summary>
            Load the file, apply to new <see cref="T:XSpect.Yacq.SymbolTable"/> and add the symbol with specified name, which refers to it in specified <see cref="T:XSpect.Yacq.SymbolTable"/>.
            </summary>
            <param name="symbols">The symbol table to add the reference to the applied symbols.</param>
            <param name="name">Name of loading file. File extension can be omitted.</param>
            <param name="symbolName">Name of the symbol which refers to the applied symbols.</param>
            <returns>The return value expression of the loaded file.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.ModuleLoader.Import(XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Load the file, apply to new <see cref="T:XSpect.Yacq.SymbolTable"/> and add the symbol named as file name, which refers to it in specified <see cref="T:XSpect.Yacq.SymbolTable"/>.
            </summary>
            <param name="symbols">The symbol table to add the reference to the applied symbols.</param>
            <param name="name">Name of loading file. File extension can be omitted.</param>
            <returns>The return value expression of the loaded file.</returns>
        </member>
        <member name="P:XSpect.Yacq.SystemObjects.ModuleLoader.SearchPaths">
            <summary>
            Gets the list to search paths for library file.
            </summary>
            <value>The list to search paths for library file.</value>
        </member>
        <member name="T:XSpect.Yacq.Expressions.QuoteType">
            <summary>
            Specifies the type of the <see cref="T:XSpect.Yacq.Expressions.QuotedExpression"/>.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.QuoteType.Quote">
            <summary>
            The expression is quote expression.
            </summary>
        </member>
        <member name="F:XSpect.Yacq.Expressions.QuoteType.Quasiquote">
            <summary>
            The expression is quasiquote expression.
            </summary>
        </member>
        <member name="T:XSpect.Yacq.SystemObjects.YacqType">
            <summary>
            Defines and creates new instances of types with YACQ codes during run time.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/> class.
            </summary>
            <param name="module">Target module to define new type.</param>
            <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
            <param name="baseTypes">The list of the deriving type and interfaces that the type implements. The deriving type must be first in the list.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineField(System.String,System.Type,System.Reflection.FieldAttributes,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new field to the type.
            </summary>
            <param name="name">The name of the field. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the field/</param>
            <param name="attributes">A bitwise combination of the field attributes.</param>
            <param name="initializer">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the initializer of the field, with a parameter for "this" instance, returns <paramref name="type"/> value.</param>
            <returns>The defined field.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
            <summary>
            Defines a new field to the type.
            </summary>
            <param name="name">The name of the field. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the field/</param>
            <param name="attributes">A bitwise combination of the field attributes.</param>
            <returns>The defined field.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineField(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public instance field to the type.
            </summary>
            <param name="name">The name of the field. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the field/</param>
            <param name="initializer">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the initializer of the field, with a parameter for "this" instance, returns <paramref name="type"/> value.</param>
            <returns>The defined field.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineField(System.String,System.Type)">
            <summary>
            Defines a new field to the type.
            </summary>
            <param name="name">The name of the field. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the field/</param>
            <returns>The defined field.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Collections.Generic.IList{System.Type},System.Linq.Expressions.Expression)">
            <summary>
            Defines a new method to the type.
            </summary>
            <param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="attributes">A bitwise combination of the method attributes.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the method, with parameters for "this" instance and all method parameters, returns <paramref name="returnType"/> value.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new method to the type.
            </summary>
            <param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="attributes">A bitwise combination of the method attributes.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the method, with parameters for "this" instance and all method parameters, returns <paramref name="returnType"/> value.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineMethod(System.String,System.Type,System.Collections.Generic.IList{System.Type},System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public instance method to the type.
            </summary>
            <param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the method, with parameters for "this" instance and all method parameters, returns <paramref name="returnType"/> value.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineMethod(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public instance method to the type.
            </summary>
            <param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the method, with parameters for "this" instance and all method parameters, returns <paramref name="returnType"/> value.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineConstructor(System.Reflection.MethodAttributes,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new constructor to the type.
            </summary>
            <param name="attributes">A bitwise combination of the constructor attributes.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the constructor, with parameters for "this" instance and all method parameters, returns no value.</param>
            <returns>The defined constructor.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineConstructor(System.Reflection.MethodAttributes,System.Collections.Generic.IList{System.Type},System.Linq.Expressions.Expression)">
            <summary>
            Defines a new constructor to the type.
            </summary>
            <param name="attributes">A bitwise combination of the constructor attributes.</param>
            <param name="parameterTypes">The types of the parameters of the constructor.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the constructor, with parameters for "this" instance and all method parameters, returns no value.</param>
            <returns>The defined constructor.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineConstructor(System.Collections.Generic.IList{System.Type},System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public constructor to the type.
            </summary>
            <param name="parameterTypes">The types of the parameters of the constructor.</param>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the constructor, with parameters for "this" instance and all method parameters, returns no value.</param>
            <returns>The defined constructor.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineConstructor(System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public constructor to the type.
            </summary>
            <param name="body">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the constructor, with parameters for "this" instance and all method parameters, returns no value.</param>
            <returns>The defined constructor.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Reflection.MethodAttributes,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="methodAttributes">A bitwise combination of the accessor method attributes.</param>
            <param name="initializer">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the initializer of the backing field, with a parameter for "this" instance, returns <paramref name="type"/> value.</param>
            <param name="getter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the getter of the property, with parameters for "this" instance, returns <paramref name="type"/> value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the getter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have getter.</param>
            <param name="setter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the setter of the property, with parameters for "this" instance and <paramref name="type"/> value, returns no value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the setter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have setter.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Reflection.MethodAttributes,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new auto-implemented property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="methodAttributes">A bitwise combination of the accessor method attributes.</param>
            <param name="initializer">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the initializer of the backing field, with a parameter for "this" instance, returns <paramref name="type"/> value.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Reflection.MethodAttributes,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="methodAttributes">A bitwise combination of the accessor method attributes.</param>
            <param name="getter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the getter of the property, with parameters for "this" instance, returns <paramref name="type"/> value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the getter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have getter.</param>
            <param name="setter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the setter of the property, with parameters for "this" instance and <paramref name="type"/> value, returns no value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the setter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have setter.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Reflection.MethodAttributes)">
            <summary>
            Defines a new auto-implemented property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="methodAttributes">A bitwise combination of the accessor method attributes.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public instance auto-implemented property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="initializer">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the initializer of the backing field, with a parameter for "this" instance, returns <paramref name="type"/> value.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Defines a new public instance property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <param name="getter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the getter of the property, with parameters for "this" instance, returns <paramref name="type"/> value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the getter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have getter.</param>
            <param name="setter">The expression which is not reduced to be <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the body of the setter of the property, with parameters for "this" instance and <paramref name="type"/> value, returns no value, <see cref="T:XSpect.Yacq.Expressions.IgnoredExpression"/> if the setter will be auto-implemented and accesses to the backing field, or <c>null</c> if this property does not have setter.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.DefineProperty(System.String,System.Type)">
            <summary>
            Defines a new auto-implemented property to the type.
            </summary>
            <param name="name">The name of the property. <paramref name="name"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the property.</param>
            <returns>The defined property.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.Create(XSpect.Yacq.SymbolTable)">
            <summary>
            Creates a <see cref="T:System.Type"/> object for the type. After defining members on the type, this method is called in order to load its Type object.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <returns>The new Type object for this type.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.GetMembers">
            <summary>
            Returns all the defined members in the type.
            </summary>
            <returns>A sequence of <see cref="T:System.Reflection.MemberInfo"/> objects representing all the defined members of the type.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.GetFields">
            <summary>
            Returns all the defined fields in the type.
            </summary>
            <returns>A sequence of <see cref="T:System.Reflection.Emit.FieldBuilder"/> objects representing all the defined fields of the type.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.GetMethods">
            <summary>
            Returns all the defined methods in the type.
            </summary>
            <returns>A sequence of <see cref="T:System.Reflection.Emit.MethodBuilder"/> objects representing all the defined methods of the type.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.GetConstructors">
            <summary>
            Returns all the defined constructors in the type.
            </summary>
            <returns>A sequence of <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> objects representing all the defined constructors of the type.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqType.GetProperties">
            <summary>
            Returns all the defined properties in the type.
            </summary>
            <returns>A sequence of <see cref="T:System.Reflection.Emit.PropertyBuilder"/> objects representing all the defined properties of the type.</returns>
        </member>
        <member name="P:XSpect.Yacq.SystemObjects.YacqType.IsCreated">
            <summary>
            Gets a value indicating whether this type is created.
            </summary>
            <value><c>true</c> if this type is created; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XSpect.Yacq.SystemObjects.YacqAssembly">
            <summary>
            Defines and represents a dynamic assembly with YACQ codes.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.#ctor(System.String,System.Reflection.Emit.PEFileKinds)">
            <summary>
            Initializes a new instance of the <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/> class.
            </summary>
            <param name="name">Name of dynamic assembly which contains generated types.</param>
            <param name="fileKind">The type of the assembly executable being built.</param>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.DefineType(System.String,System.Type[])">
            <summary>
            Constructs a <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/> in this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/>.
            </summary>
            <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
            <param name="baseTypes">The list of the deriving type and interfaces that the type implements. The deriving type must be first in the list.</param>
            <returns>A constructed <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.TryDefineType(System.String,System.Type[])">
            <summary>
            Constructs or gets a <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/> in this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/>.
            </summary>
            <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
            <param name="baseTypes">The list of the deriving type and interfaces that the type implements. The deriving type must be first in the list.</param>
            <returns>A constructed <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/>, or already constructed object if <paramref name="name"/> type is already exists.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.DefineType(System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Constructs an anonymous <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/> in this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/>.
            </summary>
            <param name="members">The dictionary which contains pairs of the name and its type of member property.</param>
            <returns>A constructed <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.TryDefineType(System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Constructs or gets an anonymous <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/> in this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/>.
            </summary>
            <param name="members">The dictionary which contains pairs of the name and its type of member property.</param>
            <returns>A constructed <see cref="T:XSpect.Yacq.SystemObjects.YacqType"/>, or already constructed object if the type with specified members is already exists.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            <returns>A sequence that contains all the types that are defined in this assembly.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.GetType(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> object with the specified name in this assembly.
            </summary>
            <param name="name">The full name of the type. </param>
            <returns>An object that represents the specified type, or <c>null</c> if the type is not found.</returns>
        </member>
        <member name="M:XSpect.Yacq.SystemObjects.YacqAssembly.Save(System.Reflection.MethodInfo)">
            <summary>
            Saves this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/> to disk.
            </summary>
            <param name="entryMethod">A reference to the method that represents the entry point for this <see cref="T:XSpect.Yacq.SystemObjects.YacqAssembly"/>, or <c>null</c> if the entry point is automatically searched.</param>
        </member>
        <member name="T:XSpect.Yacq.Expressions.VectorExpression">
            <summary>
            Represents a vector, similar to <see cref="T:XSpect.Yacq.Expressions.ListExpression"/> but this generates arrays when you reduce.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.VectorExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this expression.
            </returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.VectorExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.YacqExtensions">
            <summary>
            Provides a set of static methods for working with specific kinds of <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/> and other instances.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Reduce(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression, with (if possible) additional symbol tables.
            </summary>
            <param name="expr">The reducing expression.</param>
            <param name="symbols">The additional symbol table for reducing. If <paramref name="expr"/> is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, this parameter is ignored.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.TryReduce(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression, with (if possible) additional symbol tables. Any errors are ignored and returns <c>null</c>.
            </summary>
            <param name="expr">The reducing expression.</param>
            <param name="symbols">The additional symbol table for reducing. If <paramref name="expr"/> is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, this parameter is ignored.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression, or <c>null</c> if reducing was failed.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.ReduceAll(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces all node in this sequence to a simpler expression, with (if possible) additional symbol tables.
            </summary>
            <param name="expressions">The sequence which contains reducing expressions.</param>
            <param name="symbols">The additional symbol table for reducing. If <paramref name="expressions"/> contains expression which is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, this parameter is ignored in them.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The sequence which contains reduced expression.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Type(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Gets the static type of the expression (which with reduced with additional symbol tables, if possible) that this <see cref="T:System.Linq.Expressions.Expression"/> represents.
            </summary>
            <param name="expr">The expression.</param>
            <param name="symbols">The additional symbol table for reducing. If <paramref name="expr"/> is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, this parameter is ignored.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The static type of the expression, or reduced expression if <paramref name="expr"/> is <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.TryType(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Gets the static type of the expression (which with reduced with additional symbol tables, if possible) that this <see cref="T:System.Linq.Expressions.Expression"/> represents. Any errors are ignored and returns <c>null</c>.
            </summary>
            <param name="expr">The expression.</param>
            <param name="symbols">The additional symbol table for reducing. If <paramref name="expr"/> is not <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, this parameter is ignored.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The static type of the expression, or reduced expression if <paramref name="expr"/> is <see cref="T:XSpect.Yacq.Expressions.YacqExpression"/>, or <c>null</c> if reducing was failed.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Member(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.String)">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the member-reference dispatching.
            </summary>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="name">The name to use for dispatching.</param>
            <returns>A chained member-reference <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Member(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the member-reference dispatching.
            </summary>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <returns>A chained member-reference <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="M:XSpect.Yacq.Expressions.YacqExtensions.Type(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="symbols">The symbol table for the expression.</param>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Linq.Expressions.Expression[])">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="typeArguments">A sequence of <see cref="M:XSpect.Yacq.Expressions.YacqExtensions.Type(System.Linq.Expressions.Expression,XSpect.Yacq.SymbolTable,System.Type)"/> objects that represents the type arguments for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a chained <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="M:XSpect.Yacq.Expressions.YacqExtensions.Method(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that represents the method-call dispatching.
            </summary>
            <param name="left">An <see cref="T:System.Linq.Expressions.Expression"/> that representts the receiver or static reference for dispatching.</param>
            <param name="name">The name to use for dispatching.</param>
            <param name="arguments">A sequence of <see cref="T:System.Linq.Expressions.Expression"/> objects that represents the arguments for dispatching.</param>
            <returns>A chained method-call <see cref="T:XSpect.Yacq.Expressions.DispatchExpression"/> that has the properties set to the specified values.</returns>
        </member>
        <member name="T:XSpect.Yacq.Expressions.SymbolTableExpression">
            <summary>
            Represents an expression which referrs the symbol table.
            </summary>
        </member>
        <member name="M:XSpect.Yacq.Expressions.SymbolTableExpression.ReduceImpl(XSpect.Yacq.SymbolTable,System.Type)">
            <summary>
            Reduces this node to a simpler expression with additional symbol tables.
            </summary>
            <param name="symbols">The additional symbol table for reducing.</param>
            <param name="expectedType">The type which is expected as the type of reduced expression.</param>
            <returns>The reduced expression.</returns>
        </member>
    </members>
</doc>
